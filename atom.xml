<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wang-zhibiao&#39;blog</title>
  
  <subtitle>I am is a boy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wang-zhibiao.github.io/"/>
  <updated>2020-03-27T08:16:22.934Z</updated>
  <id>http://wang-zhibiao.github.io/</id>
  
  <author>
    <name>wangzhibiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue数据劫持</title>
    <link href="http://wang-zhibiao.github.io/2020/03/27/vue%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81/"/>
    <id>http://wang-zhibiao.github.io/2020/03/27/vue数据劫持/</id>
    <published>2020-03-27T02:51:56.000Z</published>
    <updated>2020-03-27T08:16:22.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVC思想"><a href="#MVC思想" class="headerlink" title="MVC思想"></a>MVC思想</h2><p>web开发中，我们会使用原生的html去实现简单的静态官网，但是在遇到交互极多极复杂的情况下，就力有不逮。</p><blockquote><p>MVC由三大部分组成：</p></blockquote><p>view  视图层</p><p>model 数据管理层</p><p>controller 响应用户的操作，并且更新model到view上</p><p>在MVC的情况下我们如果好进行更新model呢</p><p>用户点击某个搜索按钮</p><p>发送ajax请求</p><p>更新model</p><p>view视图层更新数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">'3.query.php'</span>,<span class="comment">//地址</span></span><br><span class="line">dataType:<span class="string">'json'</span>,<span class="comment">//数据类型</span></span><br><span class="line">type:<span class="string">'GET'</span>,<span class="comment">//类型</span></span><br><span class="line">timeout:<span class="number">2000</span>,<span class="comment">//超时</span></span><br><span class="line"><span class="comment">//请求成功</span></span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">data,status</span>)</span>&#123;</span><br><span class="line">                   <span class="comment">//更新model</span></span><br><span class="line">      <span class="keyword">let</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"button"</span>)</span><br><span class="line"><span class="comment">//操作DOM元素进行替换数据</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//失败/超时</span></span><br><span class="line">error:<span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest,textStatus,errorThrown</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(textStatus===<span class="string">'timeout'</span>)&#123;</span><br><span class="line">alert(<span class="string">'請求超時'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">'重新请求'</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//alert(errorThrown);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="MVVM思想"><a href="#MVVM思想" class="headerlink" title="MVVM思想"></a>MVVM思想</h2><p>MVVM 由 Model,View,ViewModel 三部分构成。Vue.js 是采用 Object.defineProperty 的 getter 和 setter，并结合观察者模式来实现数据绑定的。当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，Vue 将遍历它的属性，用 Object.defineProperty 将它们转为 getter/setter。用户看不到 getter/setter，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> song = <span class="string">'发如雪'</span>; </span><br><span class="line">obj.singer = <span class="string">'周杰伦'</span>;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'music'</span>, &#123;</span><br><span class="line">    <span class="comment">// 1. value: '七里香',</span></span><br><span class="line">    configurable: <span class="literal">true</span>,     <span class="comment">// 2. 可以配置对象，删除属性</span></span><br><span class="line">    <span class="comment">// writable: true,         // 3. 可以修改对象</span></span><br><span class="line">    enumerable: <span class="literal">true</span>,        <span class="comment">// 4. 可以枚举</span></span><br><span class="line">    <span class="comment">// ☆ get,set设置时不能设置writable和value，它们代替了二者且是互斥的</span></span><br><span class="line">    <span class="keyword">get</span>() &#123;     <span class="comment">// 5. 获取obj.music的时候就会调用get方法</span></span><br><span class="line">        <span class="keyword">return</span> song;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(val) &#123;      <span class="comment">// 6. 将修改的值重新赋给song</span></span><br><span class="line">        song = val;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面打印的部分分别是对应代码写入顺序执行</span></span><br><span class="line"><span class="built_in">console</span>.log(obj);   <span class="comment">// &#123;singer: '周杰伦', music: '七里香'&#125;  // 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj.music;   <span class="comment">// 如果想对obj里的属性进行删除，configurable要设为true  2</span></span><br><span class="line"><span class="built_in">console</span>.log(obj);   <span class="comment">// 此时为  &#123;singer: '周杰伦'&#125;</span></span><br><span class="line"></span><br><span class="line">obj.music = <span class="string">'听妈妈的话'</span>;   <span class="comment">// 如果想对obj的属性进行修改，writable要设为true  3</span></span><br><span class="line"><span class="built_in">console</span>.log(obj);   <span class="comment">// &#123;singer: '周杰伦', music: "听妈妈的话"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;    </span><br><span class="line">    <span class="comment">// 默认情况下通过defineProperty定义的属性是不能被枚举(遍历)的</span></span><br><span class="line">    <span class="comment">// 需要设置enumerable为true才可以</span></span><br><span class="line">    <span class="comment">// 不然你是拿不到music这个属性的，你只能拿到singer</span></span><br><span class="line">    <span class="built_in">console</span>.log(key);   <span class="comment">// singer, music    4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.music);   <span class="comment">// '发如雪'  5</span></span><br><span class="line">obj.music = <span class="string">'夜曲'</span>;       <span class="comment">// 调用set设置新的值</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.music);   <span class="comment">// '夜曲'    6</span></span><br></pre></td></tr></table></figure><p>来源：<a href="https://juejin.im/post/5abdd6f6f265da23793c4458" target="_blank" rel="noopener">掘金</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MVC思想&quot;&gt;&lt;a href=&quot;#MVC思想&quot; class=&quot;headerlink&quot; title=&quot;MVC思想&quot;&gt;&lt;/a&gt;MVC思想&lt;/h2&gt;&lt;p&gt;web开发中，我们会使用原生的html去实现简单的静态官网，但是在遇到交互极多极复杂的情况下，就力有不逮。&lt;/p&gt;

      
    
    </summary>
    
      <category term="vue" scheme="http://wang-zhibiao.github.io/categories/vue/"/>
    
    
      <category term="vue" scheme="http://wang-zhibiao.github.io/tags/vue/"/>
    
      <category term="数据劫持" scheme="http://wang-zhibiao.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81/"/>
    
  </entry>
  
  <entry>
    <title>js技术</title>
    <link href="http://wang-zhibiao.github.io/2020/03/19/js%E6%8A%80%E6%9C%AF/"/>
    <id>http://wang-zhibiao.github.io/2020/03/19/js技术/</id>
    <published>2020-03-19T06:14:14.000Z</published>
    <updated>2020-05-26T10:07:01.007Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue中对于style属性和class属性的使用"><a href="#Vue中对于style属性和class属性的使用" class="headerlink" title="Vue中对于style属性和class属性的使用"></a>Vue中对于style属性和class属性的使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正常</span></span><br><span class="line">&lt;div style=<span class="string">"width:100px"</span>&gt;</span><br><span class="line">    style</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/骚操作</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/对象写法</span></span><br><span class="line"><span class="regexp">&lt;div :style="&#123;width:'200px','text-align':center,color: activeColor, fontSize: fontSize + 'px',color:(index==0?arr.conFontColor:'#000')&#125;"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError, active: this.isActive &amp;&amp; !this.error,'text-danger': this.error &amp;&amp; this.error.type === 'fatal' &#125;"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/切换样式写法</span></span><br><span class="line"><span class="regexp">&lt;div :class="isActive == true ? 'isFixed' :''"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[&#123; active: isActive &#125;, errorClass]"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="comment">//数组语法</span></span><br><span class="line">&lt;div :style=<span class="string">"[&#123;width:'100px','text-align':center, fontSize: 100 + 'px',color:(index==0?arr.conFontColor:'#000')&#125;,&#123;width:'200px','text-align':center,color: activeColor, fontSize: fontSize + 'px',color:(index==0?arr.conFontColor:'#000')&#125;]"</span>&gt;</span><br><span class="line">    style</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/一个属性多个值时</span></span><br><span class="line"><span class="regexp">&lt;div :style="&#123; display: ['-webkit-box', '-ms-flexbox', 'flex'] &#125;"&gt;&lt;/</span>div&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">  activeColor: <span class="string">'red'</span>,</span><br><span class="line">  fontSize: <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line">data: &#123;</span><br><span class="line">  isActive: <span class="literal">true</span>,</span><br><span class="line">  hasError: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vue中对watch的利用"><a href="#vue中对watch的利用" class="headerlink" title="vue中对watch的利用"></a>vue中对watch的利用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">"planForm.number"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 解决数字键盘可以输入输入多个小数点问题</span></span><br><span class="line">    <span class="keyword">if</span> (newVal == <span class="string">""</span> &amp;&amp; oldVal.toString().indexOf(<span class="string">"."</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.planForm.number = oldVal;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保留两位小数</span></span><br><span class="line">    <span class="keyword">if</span> (newVal) &#123;</span><br><span class="line">      newVal = newVal.toString();</span><br><span class="line">      <span class="keyword">var</span> pointIndex = newVal.indexOf(<span class="string">"."</span>);</span><br><span class="line">      <span class="comment">//不出现两位小数点</span></span><br><span class="line">      <span class="keyword">if</span> (newVal.toString().lastIndexOf(<span class="string">"."</span>) &gt; pointIndex) &#123;</span><br><span class="line">        <span class="keyword">this</span>.planForm.number = oldVal;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (pointIndex &gt; <span class="number">0</span> &amp;&amp; newVal.length - pointIndex &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.planForm.number = oldVal;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="一个map函数内使用里面对某个子项进行every判断是否为数字"><a href="#一个map函数内使用里面对某个子项进行every判断是否为数字" class="headerlink" title="一个map函数内使用里面对某个子项进行every判断是否为数字"></a>一个map函数内使用里面对某个子项进行every判断是否为数字</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">value.mpa(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(v.every(<span class="function"><span class="params">item</span>=&gt;</span><span class="built_in">isNaN</span>(item)))&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="什么是-IIFE-立即调用的函数表达式"><a href="#什么是-IIFE-立即调用的函数表达式" class="headerlink" title="什么是 IIFE (立即调用的函数表达式)"></a>什么是 IIFE (立即调用的函数表达式)</h3><p><code>IIFE</code>是一个立即调用的函数表达式，它在创建后立即执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">IIFE</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"Hello!"</span> );</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// "Hello!"</span></span><br></pre></td></tr></table></figure><h3 id="无loop生成指定长度的数组"><a href="#无loop生成指定长度的数组" class="headerlink" title="无loop生成指定长度的数组"></a>无loop生成指定长度的数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> List = <span class="function"><span class="params">len</span> =&gt;</span>[...new <span class="built_in">Array</span>(len).keys()]</span><br><span class="line"><span class="keyword">const</span> list = List(<span class="number">10</span>)  <span class="comment">//=&gt;list=[0,1,2,3,4,5,6,7,8,9]</span></span><br></pre></td></tr></table></figure><h3 id="数组的去重"><a href="#数组的去重" class="headerlink" title="数组的去重"></a>数组的去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">45</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">245</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> uniqueList = [ ...new <span class="built_in">Set</span>(list)] <span class="comment">//=&gt;uniqueList= [1,2,45,5,4,245]</span></span><br></pre></td></tr></table></figure><h3 id="点击回到顶部的js"><a href="#点击回到顶部的js" class="headerlink" title="点击回到顶部的js"></a>点击回到顶部的js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Gotop.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有无定时器</span></span><br><span class="line">        <span class="keyword">if</span> (c) &#123;</span><br><span class="line">            clearInterval(c);</span><br><span class="line">        &#125;</span><br><span class="line">        c = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> target = <span class="number">0</span>; <span class="comment">//顶部的距离</span></span><br><span class="line">            <span class="keyword">var</span> step = <span class="number">10</span>; <span class="comment">//每次滚动的距离</span></span><br><span class="line">            <span class="keyword">var</span> curent = getScroll().scrollTop; <span class="comment">//滚动出去的距离</span></span><br><span class="line">            <span class="comment">//判定有没有滚动</span></span><br><span class="line">            <span class="keyword">if</span> (curent &gt; target) &#123;</span><br><span class="line">                step = -<span class="built_in">Math</span>.abs(step);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使页面开始一直往上滚</span></span><br><span class="line">            curent += step;</span><br><span class="line">            <span class="built_in">document</span>.documentElement.scrollTop = curent;</span><br><span class="line">            <span class="built_in">document</span>.body.scrollTop = curent;</span><br><span class="line">            <span class="comment">//判断最后页面是不是到了最开始的位置</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(curent) &lt;= target) &#123;</span><br><span class="line">                clearInterval(c);</span><br><span class="line">                <span class="built_in">document</span>.documentElement.scrollTop = target;</span><br><span class="line">                <span class="built_in">document</span>.body.scrollTop = target;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取页面滚动出去的距离，处理兼容性</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getScroll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            scrollTop: <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop,</span><br><span class="line">            scrpllLeft: <span class="built_in">document</span>.documentElement.scrpllLeft || <span class="built_in">document</span>.body.scrollLeft</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>map返回就是一个新的数组，也就是说 可以使用new进行创建一个数组</p><h3 id="for-in-使用"><a href="#for-in-使用" class="headerlink" title="for in 使用"></a>for in 使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> object = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span> <span class="keyword">in</span> object)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a,b,c</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in" target="_blank" rel="noopener"><code>for...in</code></a> 语句以原始插入顺序迭代对象的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties" target="_blank" rel="noopener">可枚举属性</a>。</p><p><code>for...of</code> 语句遍历<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables" target="_blank" rel="noopener">可迭代对象</a>定义要迭代的数据。</p><h3 id="for-in-去掉对象中为空的键值"><a href="#for-in-去掉对象中为空的键值" class="headerlink" title="for in 去掉对象中为空的键值"></a>for in 去掉对象中为空的键值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> filter) &#123;</span><br><span class="line">       <span class="keyword">if</span> (filter[key] === <span class="string">""</span>) &#123;</span><br><span class="line">         <span class="keyword">delete</span> filter[key];</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="数组对象的去重"><a href="#数组对象的去重" class="headerlink" title="数组对象的去重"></a>数组对象的去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> TempObj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> newArr = [...arr1,...arr2].reduce(</span><br><span class="line">   (item, next) =&gt; &#123;</span><br><span class="line">     TempObj[next.id]? <span class="string">""</span>: (TempObj[next.id] = <span class="literal">true</span> &amp;&amp; item.push(next));</span><br><span class="line">     <span class="keyword">return</span> item;</span><br><span class="line">     &#125;,[]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>说明：其中item代表的是数组的每次遍历之后的项，next表示遍历的下一项。</p><h3 id="生成随机字符串-可指定长度"><a href="#生成随机字符串-可指定长度" class="headerlink" title="生成随机字符串 (可指定长度)"></a>生成随机字符串 (可指定长度)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 生成随机字符串(可指定长度)</span><br><span class="line"> * @param len</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">randomString = function(len) &#123;</span><br><span class="line">  len = len || 8;</span><br><span class="line">  var $chars = &apos;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678&apos;;</span><br><span class="line">  /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/</span><br><span class="line">  var maxPos = $chars.length;</span><br><span class="line">  var pwd = &apos;&apos;;</span><br><span class="line">  for (var i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    pwd += $chars.charAt(Math.floor(Math.random() * maxPos));</span><br><span class="line">  &#125;</span><br><span class="line">  return pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成随机颜色值"><a href="#生成随机颜色值" class="headerlink" title="生成随机颜色值"></a>生成随机颜色值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function getRandomColor () &#123;</span><br><span class="line">  const rgb = []</span><br><span class="line">  for (let i = 0 ; i &lt; 3; ++i)&#123;</span><br><span class="line">    let color = Math.floor(Math.random() * 256).toString(16)</span><br><span class="line">    color = color.length == 1 ? &apos;0&apos; + color : color</span><br><span class="line">    rgb.push(color)</span><br><span class="line">  &#125;</span><br><span class="line">  return &apos;#&apos; + rgb.join(&apos;&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的键值不仅仅只是一个字符串"><a href="#对象的键值不仅仅只是一个字符串" class="headerlink" title="对象的键值不仅仅只是一个字符串"></a>对象的键值不仅仅只是一个字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    name:<span class="string">'wang'</span>,</span><br><span class="line">    age:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> key = <span class="string">'name'</span>;</span><br><span class="line">user[key] <span class="comment">//=&gt;  输出wang</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//key 可以是一个变量</span></span><br><span class="line"><span class="keyword">let</span> key = prompt(<span class="string">"What do you want to know about the user?"</span>, <span class="string">"name"</span>);</span><br><span class="line"><span class="comment">//prompt  浏览器的输入弹窗  在输入后会返回输入的值给key（默认输入name）</span></span><br><span class="line">user[key] <span class="comment">//==&gt; John（如果输入 "name"）</span></span><br></pre></td></tr></table></figure><p>我们对于变量的键值应该是灵活的使用</p><p>key是一个变量可以通过变量的赋值进而改变对象的输出</p><h3 id="对象内的计算属性"><a href="#对象内的计算属性" class="headerlink" title="对象内的计算属性"></a>对象内的计算属性</h3><p>我们可以在对象字面量中使用方括号。这叫做 <strong>计算属性</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> key = prompt(<span class="string">"What do you want to know about the user?"</span>, <span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  [key]: <span class="string">"wang"</span>, <span class="comment">// 属性名是从 key 变量中得到的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert( user.name ); <span class="comment">// 5 如果 key="name"</span></span><br></pre></td></tr></table></figure><p>对象的属性判断是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.key === undefined  返回true表示不存在</span><br><span class="line">“key” in user  返回true表示存在</span><br></pre></td></tr></table></figure><h3 id="city-json城市JSON数据处理为级联组件适用的结构"><a href="#city-json城市JSON数据处理为级联组件适用的结构" class="headerlink" title="city.json城市JSON数据处理为级联组件适用的结构"></a>city.json城市JSON数据处理为级联组件适用的结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.keys(City).forEach(<span class="function"><span class="params">city</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (City[city].level === <span class="number">1</span>) &#123;</span><br><span class="line">       <span class="keyword">let</span> tempArr = [];</span><br><span class="line">       City[city].children.map(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">         tempArr.push(&#123; <span class="attr">id</span>: City[v].id, <span class="attr">name</span>: City[v].name &#125;);</span><br><span class="line">       &#125;);</span><br><span class="line">       tempCity.push(&#123;</span><br><span class="line">         id: City[city].id,</span><br><span class="line">         name: City[city].name,</span><br><span class="line">         children: tempArr</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h3 id="计算指定数字的阶乘"><a href="#计算指定数字的阶乘" class="headerlink" title="计算指定数字的阶乘"></a>计算指定数字的阶乘</h3><p>利用递归调用来进行数字的阶乘</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const factorialOfNumber = number =&gt; </span><br><span class="line">  number &lt; 0</span><br><span class="line">    ? (() =&gt; &#123;</span><br><span class="line">      throw new TypeError(&apos;请输入正整数&apos;)</span><br><span class="line">    &#125;)()</span><br><span class="line">    : number &lt;= 1</span><br><span class="line">      ? 1</span><br><span class="line">      : number * factorialOfNumber(number - 1)</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">// 事例</span><br><span class="line">factorialOfNumber(4) // 24</span><br><span class="line">factorialOfNumber(8) // 40320</span><br></pre></td></tr></table></figure><h3 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reverseString = <span class="function"><span class="params">string</span> =&gt;</span> [...string].reverse().join(<span class="string">''</span>)</span><br><span class="line">reverseString(<span class="number">121245</span>) <span class="comment">//=&gt; 542121</span></span><br></pre></td></tr></table></figure><h3 id="数字数组的排序"><a href="#数字数组的排序" class="headerlink" title="数字数组的排序"></a>数字数组的排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从大到小</span></span><br><span class="line"><span class="keyword">const</span> sortArr = <span class="function">(<span class="params">array, number = <span class="number">1</span></span>) =&gt;</span> [...array].sort(<span class="function">(<span class="params">x, y</span>) =&gt;</span> y -x)</span><br><span class="line"><span class="comment">//sortArr([0,5,7,87,2]) ==&gt;[87, 7, 5, 2, 0]</span></span><br><span class="line"><span class="comment">//从小到大</span></span><br><span class="line"><span class="keyword">const</span> sortArr = <span class="function">(<span class="params">array, number = <span class="number">1</span></span>) =&gt;</span> [...array].sort(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x-y)</span><br><span class="line"><span class="comment">//sortArr([0,5,7,87,2]) ==&gt;[0, 2, 5, 7, 87]</span></span><br></pre></td></tr></table></figure><h3 id="检查数组对象中的所有对象的isChecked键值为true"><a href="#检查数组对象中的所有对象的isChecked键值为true" class="headerlink" title="检查数组对象中的所有对象的isChecked键值为true"></a>检查数组对象中的所有对象的isChecked键值为true</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isChecked = <span class="function"><span class="params">array</span> =&gt;</span> array.every(<span class="function"><span class="params">el</span> =&gt;</span> el.isChecked)</span><br></pre></td></tr></table></figure><h3 id="检查数组对象中的所有元素是否有一个isChecked键值为true"><a href="#检查数组对象中的所有元素是否有一个isChecked键值为true" class="headerlink" title="检查数组对象中的所有元素是否有一个isChecked键值为true"></a>检查数组对象中的所有元素是否有一个isChecked键值为true</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isChecked = <span class="function"><span class="params">array</span> =&gt;</span> array.some(<span class="function"><span class="params">el</span> =&gt;</span> el.isChecked)</span><br></pre></td></tr></table></figure><h3 id="测试js代码的执行耗时-performance："><a href="#测试js代码的执行耗时-performance：" class="headerlink" title="测试js代码的执行耗时:performance："></a>测试<code>js</code>代码的执行耗时:<code>performance</code>：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> start = performance.now(); </span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    sum += <span class="number">1</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> end = performance.now(); </span><br><span class="line"><span class="built_in">console</span>.log(start);</span><br><span class="line"><span class="built_in">console</span>.log(end);</span><br></pre></td></tr></table></figure><h2 id="避免多条件并列"><a href="#避免多条件并列" class="headerlink" title="避免多条件并列"></a><strong>避免多条件并列</strong></h2><p>开发中有时会遇到多个条件，执行相同的语句，也就是多个<code>||</code>这种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(status==<span class="number">1</span>||status==<span class="number">2</span>||status==<span class="number">3</span>)&#123;</span><br><span class="line">    doSomeThing()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(status)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>：</span><br><span class="line">    <span class="keyword">case</span>:<span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span>:<span class="number">3</span>:</span><br><span class="line">      doSomeThing()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> enum = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">if</span> (enum.includes(status)) &#123;</span><br><span class="line">  doSomething()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vue中对于style属性和class属性的使用&quot;&gt;&lt;a href=&quot;#Vue中对于style属性和class属性的使用&quot; class=&quot;headerlink&quot; title=&quot;Vue中对于style属性和class属性的使用&quot;&gt;&lt;/a&gt;Vue中对于style属性和
      
    
    </summary>
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://wang-zhibiao.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-elementUI使用笔记</title>
    <link href="http://wang-zhibiao.github.io/2020/03/18/vue-elementui%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://wang-zhibiao.github.io/2020/03/18/vue-elementui使用笔记/</id>
    <published>2020-03-17T16:00:00.000Z</published>
    <updated>2020-03-19T07:50:20.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-elementUI使用笔记"><a href="#vue-elementUI使用笔记" class="headerlink" title="vue-elementUI使用笔记"></a>vue-elementUI使用笔记</h2><h3 id="elementUI的具名插槽"><a href="#elementUI的具名插槽" class="headerlink" title="elementUI的具名插槽"></a>elementUI的具名插槽</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;el-input placeholder=<span class="string">"请输入"</span> v-model.number=<span class="string">"data.number"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-with-select"</span>&gt;</span><br><span class="line">      &lt;el-button slot=<span class="string">"prepend"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"budget"</span> icon=<span class="string">"el-icon-search"</span>&gt;搜索&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-button slot="append" class="budget" icon="el-icon-search"&gt;搜索&lt;/</span>el-button&gt;</span><br><span class="line">&lt;<span class="regexp">/el-input&gt;</span></span><br></pre></td></tr></table></figure><p>slot=”preprend” 在输入框前面插入按钮(可以对应jQuery中的逻辑的prepend() 方法在被选元素的开头（仍位于内部）插入指定内容）</p><p>slot=”append” 在输入框后面面插入按钮(可以对应jQuery中的逻辑的append() 方法在被选元素的结尾（仍然在内部）插入指定内容）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item&gt;</span><br><span class="line">  &lt;span slot=<span class="string">"label"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"tabs"</span>&gt;</span><br><span class="line">    &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-icon-date"</span>&gt;&lt;/i&gt;</span><br><span class="line">      表单项名</span><br><span class="line">  &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;el-input v-model="vlue"&gt;&lt;/</span>el-input&gt;</span><br><span class="line">&lt;<span class="regexp">/el-form-item&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-tab-pane name=<span class="string">"keywords"</span>&gt;</span><br><span class="line">    &lt;span slot=<span class="string">"label"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"tabs"</span>&gt;</span><br><span class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"el-icon-date"</span>&gt;&lt;/i&gt;</span><br><span class="line">       关键词</span><br><span class="line">    &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>el-tab-pane&gt;</span><br></pre></td></tr></table></figure><p>对于一些弹出框 气泡 tooltip 都需要一个参考(reference)的标签进行提示  实际作用是作为弹出框的position的绝对定位的相对定位(根据此标签进行绝对定位)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-popover</span><br><span class="line">      placement=<span class="string">"top"</span></span><br><span class="line">      title=<span class="string">"标题</span></span><br><span class="line"><span class="string">      width="</span><span class="number">200</span><span class="string">"</span></span><br><span class="line"><span class="string">      trigger="</span>hover<span class="string">"</span></span><br><span class="line"><span class="string">      content="</span>展示内容</span><br><span class="line">&gt;</span><br><span class="line">      &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"iconfont icon-wenhao"</span> slot=<span class="string">"reference"</span>&gt;&lt;/i&gt;</span><br><span class="line">&lt;<span class="regexp">/el-popover&gt;</span></span><br></pre></td></tr></table></figure><h3 id="table表格"><a href="#table表格" class="headerlink" title="table表格"></a>table表格</h3><h4 id="渲染问题"><a href="#渲染问题" class="headerlink" title="渲染问题"></a>渲染问题</h4><p>table表格是根据数据源进行渲染,当你需要在请求后再次渲染数据</p><p>只需要注意对于数据源的深拷贝就可以让table组件进行再次渲染数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;CustomTable</span><br><span class="line">    :dataSources=&quot;tableData&quot;</span><br><span class="line">    :totalNumber=&quot;totalNumber&quot;</span><br><span class="line">    @loadData=&quot;handelGetList&quot;</span><br><span class="line">    v-loading=&quot;loading&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>当第一次请求已经得到数据 tableData时,再次发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="keyword">await</span> getData(params)</span><br><span class="line"><span class="comment">//已经赋值数据，table已渲染</span></span><br><span class="line"><span class="keyword">this</span>.tableData = data.list;</span><br><span class="line"><span class="comment">//暂存一下数据</span></span><br><span class="line"><span class="keyword">let</span> tempArr = data.list;</span><br><span class="line">getOtherData(params).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">     tempArr = &#123; ...res, ...tempArr &#125;;</span><br><span class="line">    <span class="comment">//深拷贝的方法，但是只适合数据结构嵌套不深的数据，slice和JSON都可以对数据进行深拷贝</span></span><br><span class="line">     <span class="comment">// this.tableData = JSON.parse(JSON.stringify(tempArr));</span></span><br><span class="line">    <span class="comment">// this.tableData = tempArr.slice(0, tempArr.length);</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="select选择器"><a href="#select选择器" class="headerlink" title="select选择器"></a>select选择器</h3><h4 id="v-model取值为当前对象"><a href="#v-model取值为当前对象" class="headerlink" title="v-model取值为当前对象"></a>v-model取值为当前对象</h4><p>当选择的数据需要options选中的label对应的对象数据时，使用value-key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> &lt;el-select</span><br><span class="line">   v-model=&quot;value&quot;</span><br><span class="line">   placeholder=&quot;请选择广告主&quot;</span><br><span class="line">   value-key=&quot;id&quot;</span><br><span class="line"> &gt;</span><br><span class="line">   &lt;el-option</span><br><span class="line">     v-for=&quot;item in options&quot;</span><br><span class="line">     :key=&quot;item.id&quot;</span><br><span class="line">     :label=&quot;item.name&quot;</span><br><span class="line">     :value=&quot;item&quot;</span><br><span class="line">   &gt;&lt;/el-option&gt;</span><br><span class="line"> &lt;/el-select&gt;</span><br><span class="line"></span><br><span class="line">//在data中定义options属性，当组件有多个选择器 可以将数据源options抽离</span><br><span class="line">//使用as可自定义属性名 </span><br><span class="line">//import * as Options from &quot;@/assets/OPTIONS/options.js&quot;;</span><br><span class="line">import &#123;Options&#125; from &quot;@/assets/OPTIONS/options.js&quot;;</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">  Options</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用select组件的远程搜索且多选时，组件的再次搜索会令前面的组件显示为value实际id</p><h4 id="使用reduce保存旧值"><a href="#使用reduce保存旧值" class="headerlink" title="使用reduce保存旧值"></a>使用reduce保存旧值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-select</span><br><span class="line">  v-model=<span class="string">"data"</span></span><br><span class="line">  multiple</span><br><span class="line">  filterable</span><br><span class="line">  clearable</span><br><span class="line">  remote</span><br><span class="line">  reserve-keyword</span><br><span class="line">  value-key=<span class="string">"id"</span></span><br><span class="line">  placeholder=<span class="string">"请输入搜索词"</span></span><br><span class="line">  :remote-method=<span class="string">"remoteMethod"</span></span><br><span class="line">&gt;</span><br><span class="line">  &lt;el-option</span><br><span class="line">    v-<span class="keyword">for</span>=<span class="string">"item in options"</span></span><br><span class="line">    :key=<span class="string">"item.id"</span></span><br><span class="line">    :label=<span class="string">"item.name"</span></span><br><span class="line">    :value=<span class="string">"item"</span></span><br><span class="line">  &gt;</span><br><span class="line">    &lt;span style=<span class="string">"float:left"</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>el-option&gt;</span><br><span class="line">&lt;<span class="regexp">/el-select&gt;</span></span><br><span class="line"><span class="regexp"> methods: &#123;</span></span><br><span class="line"><span class="regexp">   async remoteMethod(query) &#123;</span></span><br><span class="line"><span class="regexp">      if (query !== "") &#123;</span></span><br><span class="line"><span class="regexp">        let params = &#123;</span></span><br><span class="line"><span class="regexp">          name: query</span></span><br><span class="line"><span class="regexp">        &#125;;</span></span><br><span class="line"><span class="regexp">        let query = await QueryData(params).then(res =&gt; &#123;</span></span><br><span class="line"><span class="regexp">          return res;</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp">        var TempObj = &#123;&#125;;</span></span><br><span class="line"><span class="regexp">        this.options = [...query, ...this.data].reduce(</span></span><br><span class="line"><span class="regexp">          (item, next) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            TempObj[next.id]</span></span><br><span class="line"><span class="regexp">              ? ""</span></span><br><span class="line"><span class="regexp">              : (TempObj[next.id] = true &amp;&amp; item.push(next));</span></span><br><span class="line"><span class="regexp">            return item;</span></span><br><span class="line"><span class="regexp">          &#125;,</span></span><br><span class="line"><span class="regexp">          []</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">      &#125; else &#123;</span></span><br><span class="line"><span class="regexp">        this.options = [];</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp"> &#125;</span></span><br></pre></td></tr></table></figure><h3 id="form表单"><a href="#form表单" class="headerlink" title="form表单"></a>form表单</h3><h4 id="表单验证规则"><a href="#表单验证规则" class="headerlink" title="表单验证规则"></a>表单验证规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form</span><br><span class="line">  :model=&quot;Form&quot;</span><br><span class="line">  :rules=&quot;rules&quot;</span><br><span class="line">  ref=&quot;Form&quot;</span><br><span class="line">  label-width=&quot;150px&quot;</span><br><span class="line">  v-loading=&quot;loading&quot;</span><br><span class="line">&gt;</span><br><span class="line"> &lt;el-form-item label=&quot;显示名&quot; prop=&quot;data.key&quot; class=&quot;custom&quot;&gt;</span><br><span class="line">   &lt;el-select</span><br><span class="line">    v-model=&quot;value&quot;</span><br><span class="line">    placeholder=&quot;请选择广告主&quot;</span><br><span class="line">    value-key=&quot;id&quot;</span><br><span class="line">   &gt;</span><br><span class="line">    &lt;el-option</span><br><span class="line">     v-for=&quot;item in options&quot;</span><br><span class="line">     :key=&quot;item.id&quot;</span><br><span class="line">     :label=&quot;item.name&quot;</span><br><span class="line">     :value=&quot;item&quot;</span><br><span class="line">    &gt;&lt;/el-option&gt;</span><br><span class="line">  &lt;/el-select&gt;</span><br><span class="line"> &lt;/el-form-item&gt;</span><br><span class="line">&lt;/el-form&gt;</span><br></pre></td></tr></table></figure><p>rules.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> rules = &#123;</span><br><span class="line">    <span class="comment">//当from中的数据level为一层 Form：&#123;one："1"&#125;</span></span><br><span class="line">    one：: [&#123;</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        message: <span class="string">'请选择'</span>,</span><br><span class="line">        trigger: <span class="string">'change'</span></span><br><span class="line">    &#125;]</span><br><span class="line">    <span class="comment">//当数据为多层时。 Form:&#123;first:&#123;secend:'1'&#125;&#125; 需要在el-form-item标签中定义 prop="first.secend"</span></span><br><span class="line">    <span class="string">"first.secend"</span>: [&#123;</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        message: <span class="string">'请选择'</span>,</span><br><span class="line">        trigger: <span class="string">'change'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如何解决rule验证规则在提示后切换影响其他验证规则(实际是验证规则会在el-form-item标签下生成一个div 提示el-form-item__error 但是在渲染时候v-if判断某个条件时无法再次重渲染)</span><br><span class="line">在el-form-item上加入  :key=&quot;ruleskeys&quot; data定义为 ruleskeys：1 其他受影响的加上 :key=&quot;ruleskeys+1&quot;</span><br><span class="line">在保证key值不一致的情况下 当v-if判断后会重新渲染</span><br></pre></td></tr></table></figure><h3 id="dialog对话框"><a href="#dialog对话框" class="headerlink" title="dialog对话框"></a>dialog对话框</h3><h4 id="对话框显示隐藏"><a href="#对话框显示隐藏" class="headerlink" title="对话框显示隐藏"></a>对话框显示隐藏</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Dialog :visible=<span class="string">"ShowdialogVisible"</span>  @hideDialog=<span class="string">"ShowdialogVisible = false"</span>/&gt;</span><br><span class="line"><span class="comment">//组件内</span></span><br><span class="line"> &lt;el-dialog title=<span class="string">"标题"</span> :visible.sync=<span class="string">"showDialog"</span> width=<span class="string">"500px"</span> @closed=<span class="string">"$emit('hideDialog')"</span>&gt;&lt;/el-dialog&gt;</span><br><span class="line"> props: &#123;</span><br><span class="line">    visible: <span class="built_in">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      showDialog: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue-elementUI使用笔记&quot;&gt;&lt;a href=&quot;#vue-elementUI使用笔记&quot; class=&quot;headerlink&quot; title=&quot;vue-elementUI使用笔记&quot;&gt;&lt;/a&gt;vue-elementUI使用笔记&lt;/h2&gt;&lt;h3 id=&quot;eleme
      
    
    </summary>
    
      <category term="elementUI使用笔记" scheme="http://wang-zhibiao.github.io/categories/elementUI%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://wang-zhibiao.github.io/tags/vue/"/>
    
      <category term="elementUI" scheme="http://wang-zhibiao.github.io/tags/elementUI/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的变量以及数据类型</title>
    <link href="http://wang-zhibiao.github.io/2020/01/09/%E5%8F%98%E9%87%8F%E5%92%8Cjs%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://wang-zhibiao.github.io/2020/01/09/变量和js类型的理解/</id>
    <published>2020-01-09T01:24:56.000Z</published>
    <updated>2020-03-19T08:58:53.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JavaScript数据类型"><a href="#一、JavaScript数据类型" class="headerlink" title="一、JavaScript数据类型"></a>一、JavaScript数据类型</h2><p>ECMAScript标准规定了<code>7</code>种数据类型，其把这<code>7</code>种数据类型又分为两种：原始类型和对象类型。</p><h3 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a><strong>原始类型</strong></h3><ul><li><code>Null</code>：只包含一个值：<code>null</code></li><li><code>Undefined</code>：只包含一个值：<code>undefined</code></li><li><code>Boolean</code>：包含两个值：<code>true</code>和<code>false</code></li><li><code>Number</code>：整数或浮点数，还有一些特殊值（<code>-Infinity</code>、<code>+Infinity</code>、<code>NaN</code>）</li><li><code>String</code>：一串表示文本值的字符序列</li><li><code>Symbol</code>：一种实例是唯一且不可改变的数据类型</li></ul><p>(在<code>es10</code>中加入了第七种原始类型<code>BigInt</code>，现已被最新<code>Chrome</code>支持)</p><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a><strong>对象类型</strong></h3><ul><li><p><code>Object</code>：自己分一类丝毫不过分，除了常用的<code>Object</code>，<code>Array</code>、<code>Function</code>等都属于特殊的对象</p><blockquote><p>区分原始类型和对象类型 - 不可变性</p></blockquote></li></ul><p>原始类型存放在栈空间中，而复杂类型存放在堆空间中</p><h3 id="栈内存："><a href="#栈内存：" class="headerlink" title="栈内存："></a>栈内存：</h3><ul><li>存储的值大小固定</li><li>空间较小</li><li>可以直接操作其保存的变量，运行效率高</li><li>由系统自动分配存储空间</li></ul><h3 id="堆内存："><a href="#堆内存：" class="headerlink" title="堆内存："></a>堆内存：</h3><ul><li>存储的值大小不定，可动态调整</li><li>空间较大，运行效率低</li><li>无法直接操作其内部存储，使用引用地址读取</li><li>通过代码进行分配空间</li></ul><h4 id="字符串-具备不可变性"><a href="#字符串-具备不可变性" class="headerlink" title="字符串 具备不可变性"></a><code>字符串 具备不可变性</code></h4><p>不管是字符串的裁切splice 还是 toLowerCase 都是在原有的基础上产生新的字符串</p><p><code>JavaScript</code>中的原始类型的值被直接存储在栈中，在变量定义时，栈就为其分配好了内存空间。</p><p>由于栈中的内存空间的大小是固定的，那么注定了存储在栈中的变量就是不可变的</p><h4 id="对象-具备可变性"><a href="#对象-具备可变性" class="headerlink" title="对象 具备可变性"></a><code>对象 具备可变性</code></h4><p>引用类型的值实际存储在堆内存中，它在栈中只存储了一个固定长度的地址，这个地址指向堆内存中的值。</p><p>数组  是一个复杂（引用）类型</p><h4 id="通过一些api可以改变数组"><a href="#通过一些api可以改变数组" class="headerlink" title="通过一些api可以改变数组"></a>通过一些api可以改变数组</h4><ul><li><code>pop()</code> 删除数组最后一个元素，如果数组为空，则不改变数组，返回undefined，改变原数组，返回被删除的元素</li><li><code>push()</code>向数组末尾添加一个或多个元素，改变原数组，返回新数组的长度</li><li><code>shift()</code>把数组的第一个元素删除，若空数组，不进行任何操作，返回undefined,改变原数组，返回第一个元素的值</li><li><code>unshift()</code>向数组的开头添加一个或多个元素，改变原数组，返回新数组的长度</li><li><code>reverse()</code>颠倒数组中元素的顺序，改变原数组，返回该数组</li><li><code>sort()</code>对数组元素进行排序，改变原数组，返回该数组</li><li><code>splice()</code>从数组中添加/删除项目，改变原数组，返回被删除的元素</li></ul><p>当我们进行复制时两者有着本质的区别</p><p>这里涉及到浅拷贝和深拷贝—本质是复制时是否改变复制的对象的数值或属性或方法</p><h4 id="原始类型-1"><a href="#原始类型-1" class="headerlink" title="原始类型"></a>原始类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'wang'</span>;</span><br><span class="line"><span class="keyword">var</span> newName = name;</span><br><span class="line">newName = <span class="string">'Mr.wang'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">// =&gt;wang</span></span><br><span class="line"><span class="built_in">console</span>.log(newName) <span class="comment">// =&gt;Mr.wang</span></span><br></pre></td></tr></table></figure><p>内存中有一个变量<code>name</code>，值为<code>wang</code>。我们从变量<code>name</code>复制出一个变量<code>newName</code>，此时在内存中创建了一个块新的空间用于存储<code>wang</code>，虽然两者值是相同的，但是两者指向的内存空间完全不同，这两个变量参与任何操作都互不影响。</p><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'wang'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> newObj = obj;</span><br><span class="line">newObj.name = <span class="string">'Mr.wang'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">//=&gt; Mr.wang</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj.name)<span class="comment">//=&gt; Mr.wang</span></span><br></pre></td></tr></table></figure><p>当我们复制引用类型的变量时，实际上复制的是栈中存储的地址，所以复制出来的<code>newObj</code>实际上和<code>obj</code>指向的堆中同一个对象。因此，我们改变其中任何一个变量的值，另一个变量都会受到影响，这就是为什么会有深拷贝和浅拷贝的原因。</p><h3 id="原始类型和引用类型的比较"><a href="#原始类型和引用类型的比较" class="headerlink" title="原始类型和引用类型的比较"></a>原始类型和引用类型的比较</h3><p>原始类型，比较时会直接比较它们的值，如果值相等，即返回<code>true</code>。</p><p>引用类型，比较时会比较它们的引用地址，虽然两个变量在堆中存储的对象具有的属性值都是相等的，但是它们被存储在了不同的存储空间，因此比较值为<code>false</code>。</p><h4 id="区分null和undefined"><a href="#区分null和undefined" class="headerlink" title="区分null和undefined"></a>区分null和undefined</h4><p><strong>null</strong></p><p>表示被赋值过的对象，刻意把一个对象赋值为<code>null</code>，故意表示其为空，不应有值。</p><p>所以对象的某个属性值为<code>null</code>是正常的，<code>null</code>转换为数值时值为<code>0</code>。</p><p><strong>undefined</strong></p><p>表示“缺少值”，即此处应有一个值，但还没有定义，</p><p>如果一个对象的某个属性值为<code>undefined</code>，这是不正常的，如<code>obj.name=undefined</code>，我们不应该这样写，应该直接<code>delete obj.name</code>。</p><p><code>undefined</code>转为数值时为<code>NaN</code>(非数字值的特殊值)<img src="https://raw.githubusercontent.com/wang-zhibiao/wang-zhibiao.github.io/master/img/nullAndundefined.png" alt="nullAndundefined.png"></p><p><code>JavaScript</code>是一门动态类型语言，成员除了表示存在的空值外，还有可能根本就不存在（因为存不存在只在运行期才知道），这就是<code>undefined</code>的意义所在。对于<code>JAVA</code>这种强类型语言，如果有<code>&quot;undefined&quot;</code>这种情况，就会直接编译失败，所以在它不需要一个这样的类型。</p><h4 id="你想不到的0-1-0-2≠0-3"><a href="#你想不到的0-1-0-2≠0-3" class="headerlink" title="你想不到的0.1+0.2≠0.3"></a>你想不到的0.1+0.2≠0.3</h4><blockquote><p>本质是：由于数字在js中的计算是先转换为二进制在进行计算的，然后以十进制输出</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgeFloat</span>(<span class="params">n, m</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> binaryN = n.toString(<span class="number">2</span>);</span><br><span class="line">      <span class="keyword">const</span> binaryM = m.toString(<span class="number">2</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;n&#125;</span>的二进制是    <span class="subst">$&#123;binaryN&#125;</span>`</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;m&#125;</span>的二进制是    <span class="subst">$&#123;binaryM&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">const</span> MN = m + n;</span><br><span class="line">      <span class="keyword">const</span> accuracyMN = (m * <span class="number">100</span> + n * <span class="number">100</span>) / <span class="number">100</span>;</span><br><span class="line">      <span class="keyword">const</span> binaryMN = MN.toString(<span class="number">2</span>);</span><br><span class="line">      <span class="keyword">const</span> accuracyBinaryMN = accuracyMN.toString(<span class="number">2</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;n&#125;</span>+<span class="subst">$&#123;m&#125;</span>的二进制是<span class="subst">$&#123;binaryMN&#125;</span>`</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;accuracyMN&#125;</span>的二进制是    <span class="subst">$&#123;accuracyBinaryMN&#125;</span>`</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;n&#125;</span>+<span class="subst">$&#123;m&#125;</span>的二进制再转成十进制是<span class="subst">$&#123;to10(binaryMN)&#125;</span>`</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;accuracyMN&#125;</span>的二进制是再转成十进制是<span class="subst">$&#123;to10(accuracyBinaryMN)&#125;</span>`</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;n&#125;</span>+<span class="subst">$&#123;m&#125;</span>在js中计算是<span class="subst">$&#123;(to10(binaryMN) === to10(accuracyBinaryMN)) ? <span class="string">''</span> : <span class="string">'不'</span>&#125;</span>准确的`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">to10</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> pre = (n.split(<span class="string">'.'</span>)[<span class="number">0</span>] - <span class="number">0</span>).toString(<span class="number">2</span>);</span><br><span class="line">      <span class="keyword">const</span> arr = n.split(<span class="string">'.'</span>)[<span class="number">1</span>].split(<span class="string">''</span>);</span><br><span class="line">      <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; arr.length) &#123;</span><br><span class="line">        result += arr[i] * <span class="built_in">Math</span>.pow(<span class="number">2</span>, -(i + <span class="number">1</span>));</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    judgeFloat(<span class="number">0.1</span>, <span class="number">0.2</span>);</span><br><span class="line">    judgeFloat(<span class="number">0.6</span>, <span class="number">0.7</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wang-zhibiao/wang-zhibiao.github.io/master/img/0.1+0.2.jpg" alt="0.1+0.2"></p><p>计算机中所有的数据都是以<code>二进制</code>存储的，所以在计算时计算机要把数据先转换成<code>二进制</code>进行计算，然后在把计算结果转换成<code>十进制</code>。</p><p>由上面的代码不难看出，在计算<code>0.1+0.2</code>时，<code>二进制</code>计算发生了精度丢失，导致再转换成<code>十进制</code>后和预计的结果不符。</p><h4 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h4><p><img src="https://raw.githubusercontent.com/wang-zhibiao/wang-zhibiao.github.io/master/img/%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2.jpg" alt="隐式转换"></p><h3 id="if语句和逻辑语句"><a href="#if语句和逻辑语句" class="headerlink" title="if语句和逻辑语句"></a>if语句和逻辑语句</h3><p>在<code>if</code>语句和逻辑语句中，如果只有单个变量，会先将变量转换为<code>Boolean</code>值，只有下面几种情况会转换成<code>false</code>，其余被转换成<code>true</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">null</span><br><span class="line">undefined</span><br><span class="line">&apos;&apos;</span><br><span class="line">NaN</span><br><span class="line">0</span><br><span class="line">false</span><br></pre></td></tr></table></figure><h3 id="各种运数学算符"><a href="#各种运数学算符" class="headerlink" title="各种运数学算符"></a>各种运数学算符</h3><p>我们在对各种非<code>Number</code>类型运用数学运算符(<code>- * /</code>)时，会先将非<code>Number</code>类型转换为<code>Number</code>类型;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 - true // 0</span><br><span class="line">1 - null //  1</span><br><span class="line">1 * undefined //  NaN</span><br><span class="line">2 * [&apos;5&apos;] //  10</span><br></pre></td></tr></table></figure><p>注意<code>+</code>是个例外，执行<code>+</code>操作符时：</p><ul><li>1.当一侧为<code>String</code>类型，被识别为字符串拼接，并会优先将另一侧转换为字符串类型。</li><li>2.当一侧为<code>Number</code>类型，另一侧为原始类型，则将原始类型转换为<code>Number</code>类型。</li><li>3.当一侧为<code>Number</code>类型，另一侧为引用类型，将引用类型和<code>Number</code>类型转换成字符串后拼接。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">123 + &apos;123&apos; // 123123   （规则1）</span><br><span class="line">123 + null  // 123    （规则2）</span><br><span class="line">123 + true // 124    （规则2）</span><br><span class="line">123 + &#123;&#125;  // 123[object Object]    （规则3）</span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="== 运算符"></a>== 运算符</h3><p>使用<code>==</code>时，若两侧类型相同，则比较结果和<code>===</code>相同，否则会发生隐式转换，使用<code>==</code>时发生的转换可以分为几种不同的情况（只考虑两侧类型不同）：</p><ul><li><h5 id="1-NaN"><a href="#1-NaN" class="headerlink" title="1.NaN"></a><strong>1.NaN</strong></h5></li></ul><p><code>NaN</code>和其他任何类型比较永远返回<code>false</code>(包括和他自己)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NaN == NaN // false</span><br></pre></td></tr></table></figure><ul><li><h5 id="2-Boolean"><a href="#2-Boolean" class="headerlink" title="2.Boolean"></a><strong>2.Boolean</strong></h5></li></ul><p><code>Boolean</code>和其他任何类型比较，<code>Boolean</code>首先被转换为<code>Number</code>类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">true == 1  // true </span><br><span class="line">true == &apos;2&apos;  // false</span><br><span class="line">true == [&apos;1&apos;]  // true</span><br><span class="line">true == [&apos;2&apos;]  // false</span><br></pre></td></tr></table></figure><blockquote><p>这里注意一个可能会弄混的点：<code>undefined、null</code>和<code>Boolean</code>比较，虽然<code>undefined、null</code>和<code>false</code>都很容易被想象成假值，但是他们比较结果是<code>false</code>，原因是<code>false</code>首先被转换成<code>0</code>：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">undefined == false // false</span><br><span class="line">null == false // false</span><br></pre></td></tr></table></figure><ul><li><h5 id="3-String和Number"><a href="#3-String和Number" class="headerlink" title="3.String和Number"></a><strong>3.String和Number</strong></h5></li></ul><p><code>String</code>和<code>Number</code>比较，先将<code>String</code>转换为<code>Number</code>类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123 == &apos;123&apos; // true</span><br><span class="line">&apos;&apos; == 0 // true</span><br></pre></td></tr></table></figure><ul><li><h5 id="4-null和undefined"><a href="#4-null和undefined" class="headerlink" title="4.null和undefined"></a><strong>4.null和undefined</strong></h5></li></ul><p><code>null == undefined</code>比较结果是<code>true</code>，除此之外，<code>null、undefined</code>和其他任何结果的比较值都为<code>false</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">null == undefined // true</span><br><span class="line">null == &apos;&apos; // false</span><br><span class="line">null == 0 // false</span><br><span class="line">null == false // false</span><br><span class="line">undefined == &apos;&apos; // false</span><br><span class="line">undefined == 0 // false</span><br><span class="line">undefined == false // false</span><br></pre></td></tr></table></figure><ul><li><h5 id="5-原始类型和引用类型"><a href="#5-原始类型和引用类型" class="headerlink" title="5.原始类型和引用类型"></a><strong>5.原始类型和引用类型</strong></h5></li></ul><p>当原始类型和引用类型做比较时，对象类型会依照<code>ToPrimitive</code>规则转换为原始类型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;[object Object]&apos; == &#123;&#125; // true</span><br><span class="line">&apos;1,2,3&apos; == [1, 2, 3] // true</span><br></pre></td></tr></table></figure><p>来看看下面这个比较：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] == ![] // true</span><br></pre></td></tr></table></figure><p><code>!</code>的优先级高于<code>==</code>，<code>![]</code>首先会被转换为<code>false</code>，然后根据上面第三点，<code>false</code>转换成<code>Number</code>类型<code>0</code>，左侧<code>[]</code>转换为<code>0</code>，两侧比较相等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[null] == false // true</span><br><span class="line">[undefined] == false // true</span><br></pre></td></tr></table></figure><p>根据数组的<code>ToPrimitive</code>规则，数组元素为<code>null</code>或<code>undefined</code>时，该元素被当做空字符串处理，所以<code>[null]、[undefined]</code>都会被转换为<code>0</code>。</p><h4 id="原型链的规则"><a href="#原型链的规则" class="headerlink" title="原型链的规则"></a>原型链的规则</h4><ul><li>1.所有引用类型都具有对象特性，即可以自由扩展属性</li><li>2.所有引用类型都具有一个<code>proto</code>（隐式原型）属性，是一个普通对象</li><li>3.所有的函数都具有<code>prototype</code>（显式原型）属性，也是一个普通对象</li><li>4.所有引用类型<code>proto</code>值指向它构造函数的<code>prototype</code></li><li>5.当试图得到一个对象的属性时，如果变量本身没有这个属性，则会去他的<code>proto</code>中去找</li></ul><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><p>上面我们在拆箱操作中提到了<code>toString</code>函数，我们可以调用它实现从引用类型的转换。</p><blockquote><p>每一个引用类型都有<code>toString</code>方法，默认情况下，<code>toString()</code>方法被每个<code>Object</code>对象继承。如果此方法在自定义对象中未被覆盖，<code>toString()</code> 返回 <code>&quot;[object type]&quot;</code>，其中<code>type</code>是对象的类型。</p></blockquote><p><img src="https://raw.githubusercontent.com/wang-zhibiao/wang-zhibiao.github.io/master/img/tostring.jpg" alt="tostring"></p><h3 id="0-11加上0-1不等于0-1"><a href="#0-11加上0-1不等于0-1" class="headerlink" title="0.11加上0.1不等于0.1"></a>0.11加上0.1不等于0.1</h3><p>解决方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>((prev + curr).toFixed(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="JavaScript怎么把两个数组里的多个对象一一对应合并？"><a href="#JavaScript怎么把两个数组里的多个对象一一对应合并？" class="headerlink" title="JavaScript怎么把两个数组里的多个对象一一对应合并？"></a>JavaScript怎么把两个数组里的多个对象一一对应合并？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = [&#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="number">980550455852</span>,</span><br><span class="line">  <span class="string">"model"</span>: <span class="string">"XQG70-S1208FW"</span>,</span><br><span class="line">  <span class="string">"color"</span>: <span class="string">"白"</span>,</span><br><span class="line">  <span class="string">"invStatusName"</span>: <span class="string">"正品"</span>,</span><br><span class="line">  <span class="string">"bactualQty"</span>: <span class="number">10947</span>,</span><br><span class="line">  <span class="string">"brealyQty"</span>: <span class="number">11000</span>,</span><br><span class="line">  <span class="string">"bavailQty"</span>: <span class="number">53</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="number">980550566221</span>,</span><br><span class="line">  <span class="string">"model"</span>: <span class="string">"XQB70-C3006"</span>,</span><br><span class="line">  <span class="string">"color"</span>: <span class="string">"灰"</span>,</span><br><span class="line">  <span class="string">"invStatusName"</span>: <span class="string">"正品"</span>,</span><br><span class="line">  <span class="string">"bactualQty"</span>: <span class="number">11</span>,</span><br><span class="line">  <span class="string">"brealyQty"</span>: <span class="number">6</span>,</span><br><span class="line">  <span class="string">"bavailQty"</span>: <span class="number">-5</span></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = [&#123;</span><br><span class="line">  <span class="string">"price"</span>: <span class="string">"6666"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="string">"price"</span>: <span class="string">"8888"</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">var</span> obj = obj1.map(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;...item, ...obj2[index]&#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(obj);  <span class="comment">//</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、JavaScript数据类型&quot;&gt;&lt;a href=&quot;#一、JavaScript数据类型&quot; class=&quot;headerlink&quot; title=&quot;一、JavaScript数据类型&quot;&gt;&lt;/a&gt;一、JavaScript数据类型&lt;/h2&gt;&lt;p&gt;ECMAScript标准规定
      
    
    </summary>
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>csss实用技巧持续更新</title>
    <link href="http://wang-zhibiao.github.io/2020/01/01/%E5%AE%9E%E7%94%A8css%E6%8A%80%E5%B7%A7/"/>
    <id>http://wang-zhibiao.github.io/2020/01/01/实用css技巧/</id>
    <published>2019-12-31T16:10:56.000Z</published>
    <updated>2020-03-19T08:59:17.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><h3 id="less中的变量"><a href="#less中的变量" class="headerlink" title="less中的变量"></a>less中的变量</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*如何定义</span></span><br><span class="line"><span class="comment">@变量名=变量值</span></span><br><span class="line"><span class="comment">如何使用</span></span><br><span class="line"><span class="comment">在样式中</span></span><br><span class="line"><span class="comment">属性:变量名</span></span><br><span class="line"><span class="comment">例子</span></span><br><span class="line"><span class="comment">定义*/</span></span><br><span class="line">@<span class="keyword">color</span>=#<span class="keyword">f00</span>；</span><br><span class="line">/*使用*/</span><br><span class="line"><span class="keyword">a</span>&#123;</span><br><span class="line"><span class="selector-tag">color</span><span class="selector-pseudo">:color</span>;</span><br><span class="line"><span class="selector-tag">background</span><span class="selector-pseudo">:color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="less的循环-，使用递归"><a href="#less的循环-，使用递归" class="headerlink" title="less的循环 ，使用递归"></a>less的循环 ，使用递归</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>:<span class="number">10px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>:<span class="number">20px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box3</span>&#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>:<span class="number">30px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box4</span>&#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>:<span class="number">40px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loop</span>(<span class="variable">@cout</span>)<span class="keyword">when</span>(<span class="variable">@cout</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="selector-class">.loop</span>((<span class="variable">@cout-1</span>))</span><br><span class="line">    <span class="selector-class">.box</span><span class="variable">@&#123;cout&#125;</span>&#123;</span><br><span class="line">        <span class="attribute">border-bottom</span>:<span class="variable">@cout</span>+<span class="number">0px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.loop</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="原生css的声明变量"><a href="#原生css的声明变量" class="headerlink" title="原生css的声明变量"></a>原生css的声明变量</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*声明变量 使用 -- 关键字</span></span><br><span class="line"><span class="comment">调用变量 使用 var() 函数*/</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="attribute">--color</span>: red;</span><br><span class="line">      <span class="comment">/* 使用变量 必须放在var函数内 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span>(<span class="selector-tag">--</span>变量名,参数)</span><br><span class="line"> <span class="selector-tag">div</span> &#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">      <span class="comment">/* 默认参数  200px */</span></span><br><span class="line">      <span class="attribute">padding-top</span>: <span class="built_in">var</span>(--padding-top,200px);</span><br><span class="line">      <span class="comment">/* 默认参数 10px solid red */</span></span><br><span class="line">      <span class="attribute">border</span>: <span class="built_in">var</span>(--border, 10px solid red);</span><br><span class="line">      <span class="comment">/* 默认参数  linear-gradient(yellow,red) */</span></span><br><span class="line">      <span class="attribute">background-image</span>: <span class="built_in">var</span>(--img,linear-gradient(yellow,red));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="css的计算（calc）"><a href="#css的计算（calc）" class="headerlink" title="css的计算（calc）"></a>css的计算（calc）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">height</span>:<span class="built_in">calc</span>(100px*90)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将超出的文本以…的方式缩减"><a href="#将超出的文本以…的方式缩减" class="headerlink" title="将超出的文本以…的方式缩减"></a>将超出的文本以…的方式缩减</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.line2</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: normal<span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex弹性布局子元素居中"><a href="#flex弹性布局子元素居中" class="headerlink" title="flex弹性布局子元素居中"></a>flex弹性布局子元素居中</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">    <span class="attribute">justify-content</span>:center;</span><br><span class="line">    <span class="attribute">align-content</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-not-选择器"><a href="#使用-not-选择器" class="headerlink" title="使用:not()选择器"></a>使用:not()选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span><span class="selector-pseudo">:not(last-child)</span>&#123;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>not()是可以令最后一项li不加右边框，表示否定</p><p>使用伪类+content+position+transform实现文字或者图形的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*文字实现 ° 度数单位*/</span></span><br><span class="line"> <span class="selector-tag">div</span> &#123;</span><br><span class="line">         <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">         <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">         <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">         <span class="attribute">position</span>: relative;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">         <span class="attribute">content</span>: <span class="string">'°'</span>;</span><br><span class="line">         <span class="attribute">position</span>: absolute;</span><br><span class="line">         <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">         <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="bing-com搜索的国际版按钮的布局"><a href="#bing-com搜索的国际版按钮的布局" class="headerlink" title="bing.com搜索的国际版按钮的布局"></a>bing.com搜索的国际版按钮的布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">span &#123;</span><br><span class="line">    width: 82px;</span><br><span class="line">    height: 36px;</span><br><span class="line">    display: block;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin-right: 8px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">span i &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    z-index: 2;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    line-height: 30px;</span><br><span class="line">    text-align: center;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-tag">span</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    display: block;</span><br><span class="line">    content: "";</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(255, 255, 255, 0<span class="selector-class">.2</span>) <span class="selector-tag">solid</span>;</span></span><br><span class="line">    border-bottom: none;</span><br><span class="line"><span class="css">    <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(1<span class="selector-class">.1</span>, 1<span class="selector-class">.3</span>) <span class="selector-tag">perspective</span>(0<span class="selector-class">.7em</span>) <span class="selector-tag">rotateX</span>(2<span class="selector-class">.2deg</span>);  <span class="comment">/*重点*/</span></span></span><br><span class="line">    transform-origin: bottom left;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.5</span>);</span></span><br><span class="line">    border-radius: 1px 2px 0 0;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>国际版<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;                     <span class="comment">/*IE6*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"."</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line">// 全浏览器通用的clearfix方案【推荐】</span><br><span class="line">// 引入了zoom以支持IE6/7</span><br><span class="line">// 同时加入:before以解决现代浏览器上边距折叠的问题</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用overflow-x排版横向列表"><a href="#使用overflow-x排版横向列表" class="headerlink" title="使用overflow-x排版横向列表"></a>使用overflow-x排版横向列表</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow-x</span><span class="selector-pseudo">:auto</span></span><br></pre></td></tr></table></figure><p>说明：通过<code>flexbox</code>或<code>inline-block</code>的形式横向排列子元素，对父元素设置<code>overflow-x:auto</code>横向滚动查看，或者设置<code>overflow-x:auto</code> 纵向滚动条一般用于商品分类</p><h3 id="使用letter-spacing排版倒序文本"><a href="#使用letter-spacing排版倒序文本" class="headerlink" title="使用letter-spacing排版倒序文本"></a>使用letter-spacing排版倒序文本</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">letter-spacing</span><span class="selector-pseudo">:-10px</span></span><br></pre></td></tr></table></figure><p>说明：通过<code>letter-spacing</code>设置负值字体间距将文本倒序</p><h3 id="使用-selection改变文本选择颜色"><a href="#使用-selection改变文本选择颜色" class="headerlink" title="使用::selection改变文本选择颜色"></a>使用::selection改变文本选择颜色</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo</span><span class="selector-pseudo">::selection</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：可以让你选择的文字设置单独的css样式</p><h2 id="css禁用鼠标事件"><a href="#css禁用鼠标事件" class="headerlink" title="css禁用鼠标事件"></a>css禁用鼠标事件</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.disabled</span> &#123;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">    <span class="attribute">cursor</span>: default;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// indexOf实现</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">1</span>, <span class="string">'1'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = array.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> current = array[i];</span><br><span class="line">        <span class="keyword">if</span> (res.indexOf(current) === <span class="number">-1</span>) &#123;</span><br><span class="line">            res.push(current)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// filter实现</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">'1'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.indexOf(item) === index;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique(array));</span><br></pre></td></tr></table></figure><h2 id="如何将浮点数点左边的数每三位添加一个逗号，如12000000-11转化为『12-000-000-11』"><a href="#如何将浮点数点左边的数每三位添加一个逗号，如12000000-11转化为『12-000-000-11』" class="headerlink" title="如何将浮点数点左边的数每三位添加一个逗号，如12000000.11转化为『12,000,000.11』?"></a>如何将浮点数点左边的数每三位添加一个逗号，如12000000.11转化为『12,000,000.11』?</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function commafy(num)&#123;</span><br><span class="line">  return num &amp;&amp; num</span><br><span class="line">  .toString()</span><br><span class="line">  .replace(/(\d)(?=(\d&#123;3&#125;)+\.)/g, function($1, $2)&#123;</span><br><span class="line">  return $2 + &apos;,&apos;;</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>目前Flexible会将视觉稿分成<strong><code>100份</code></strong>（主要为了以后能更好的兼容<code>vh</code>和<code>vw</code>），而每一份被称为一个单位<code>a</code>。同时<code>1rem</code>单位被认定为<code>10a</code>。针对我们这份视觉稿可以计算出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1a   = 7.5px</span><br><span class="line">1rem = 75p</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Administrator/Desktop/%E5%8F%91%E5%B8%83/cssrem.png" alt="cssrem"></p><p>所有的下载插件都可以在文件-&gt;首选项-&gt;设置进行修改</p><p>某些插件需要重启才能进行使用</p><h3 id="css字体不让选中"><a href="#css字体不让选中" class="headerlink" title="css字体不让选中"></a>css字体不让选中</h3><blockquote><p>class样式添加以下：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">-webkit-user-select</span>:none;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">-moz-user-select</span>:none;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">-ms-user-select</span>:none;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">user-select</span>:none;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="css之滚动条"><a href="#css之滚动条" class="headerlink" title="css之滚动条"></a>css之滚动条</h2><p>当设置这两个属性时，只允许Y轴滚动（纵向）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">scroll</span>;</span><br><span class="line"><span class="selector-tag">overflow-x</span>: <span class="selector-tag">hidden</span>;</span><br></pre></td></tr></table></figure><h2 id="sroll-snap-type"><a href="#sroll-snap-type" class="headerlink" title="sroll-snap-type"></a>sroll-snap-type</h2><p>这个属性规定了一个容器是否对内部滚动动作进行捕捉，并且规定了如何去处理滚动结束状态。</p><h4 id="mandatory：强制性"><a href="#mandatory：强制性" class="headerlink" title="mandatory：强制性"></a>mandatory：强制性</h4><p>强制使滚动条停止在scroll-snap-align:设定的位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">scroll-snap-type</span>: x mandatory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">scroll-snap-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> scroll-snap-type: x mandatory;对于X轴的捕捉控制，scroll-snap-align: center;强制使li回到中间</p><h4 id="proximity-接近、临近、大约"><a href="#proximity-接近、临近、大约" class="headerlink" title="proximity 接近、临近、大约"></a><code>proximity</code> <strong>接近、临近、大约</strong></h4><p>滚动结束后可能还在原来的地方，也可能额外滚动</p><h3 id="scroll-snap-margin-scroll-snap-padding"><a href="#scroll-snap-margin-scroll-snap-padding" class="headerlink" title="scroll-snap-margin/scroll-snap-padding"></a><code>scroll-snap-margin</code>/<code>scroll-snap-padding</code></h3><p>可以设定margin padding 进行控制，滚动条的盒子属性</p><h3 id="scroll-snap-type-both-mandatory"><a href="#scroll-snap-type-both-mandatory" class="headerlink" title="scroll-snap-type: both mandatory"></a>scroll-snap-type: both mandatory</h3><p>对于X和Y轴同时可进行滚动</p><h3 id="scroll-snap-align-start-center-end"><a href="#scroll-snap-align-start-center-end" class="headerlink" title="scroll-snap-align: start | center | end;"></a>scroll-snap-align: start | center | end;</h3><p>子元素相对于父元素的对其方式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;less&quot;&gt;&lt;a href=&quot;#less&quot; class=&quot;headerlink&quot; title=&quot;less&quot;&gt;&lt;/a&gt;less&lt;/h2&gt;&lt;h3 id=&quot;less中的变量&quot;&gt;&lt;a href=&quot;#less中的变量&quot; class=&quot;headerlink&quot; title=&quot;l
      
    
    </summary>
    
      <category term="css" scheme="http://wang-zhibiao.github.io/categories/css/"/>
    
    
      <category term="css" scheme="http://wang-zhibiao.github.io/tags/css/"/>
    
      <category term="实用" scheme="http://wang-zhibiao.github.io/tags/%E5%AE%9E%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3.0的开发</title>
    <link href="http://wang-zhibiao.github.io/2019/12/12/vue3.0%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/"/>
    <id>http://wang-zhibiao.github.io/2019/12/12/vue3.0开发过程/</id>
    <published>2019-12-12T04:12:12.000Z</published>
    <updated>2020-03-19T08:58:20.166Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://github.com/wang-zhibiao/imageLib/blob/master/vue3.0%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png?raw=true" alt="项目结构"></p><p>解析：项目存在public（公共） favicon.ico（网站图标） index.html(入口文件)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"&lt;%= BASE_URL %&gt;favicon.ico"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>网站名<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We're sorry but advertisement doesn't work properly without JavaScript enabled. Please enable it to</span><br><span class="line">      continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.5.17-beta.0/vue.runtime.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://jira.finway.com.cn/vue-source/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此入口采用cdn引入外部的element-ui  axios  vue  vue-router moment </p><h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><p>src作为项目的资源文件存放路径-包含以下的子文件夹</p><h4 id="assets"><a href="#assets" class="headerlink" title="assets"></a>assets</h4><p>存放images，JSON文件</p><p>调用时可以使用 路径 “@/assets/images/“+”图片名”</p><h4 id="components（自定义公共组件）"><a href="#components（自定义公共组件）" class="headerlink" title="components（自定义公共组件）"></a>components（自定义公共组件）</h4><p>如果你创建了一些公共组件 在整个项目中多次调用时，可以拆分为单独的公共组件</p><h4 id="request（请求）-api"><a href="#request（请求）-api" class="headerlink" title="request（请求）/api"></a>request（请求）/api</h4><h5 id="对于axios的二次封装"><a href="#对于axios的二次封装" class="headerlink" title="对于axios的二次封装"></a>对于axios的二次封装</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'../router'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Message&#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="comment">// 是否允许跨域</span></span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// axios初始化：延迟时间，主路由地址</span></span><br><span class="line"><span class="keyword">let</span> instance = axios.create(&#123;</span><br><span class="line">    baseURL: process.env.VUE_APP_BASE_API,</span><br><span class="line">    timeout: <span class="number">10000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置拦截器</span></span><br><span class="line">instance.interceptors.request.use(</span><br><span class="line">    config =&gt; &#123;</span><br><span class="line">        config.headers = &#123;      <span class="string">'Content-Type'</span>:<span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">    &#125; </span><br><span class="line">        <span class="comment">//在发送请求之前做某事</span></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="comment">//请求错误时做些事</span></span><br><span class="line">        <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//响应拦截器</span></span><br><span class="line">instance.interceptors.response.use(</span><br><span class="line">    response =&gt; &#123;</span><br><span class="line">        <span class="comment">//请求结束成功</span></span><br><span class="line">        <span class="keyword">if</span> (response.status === <span class="number">200</span> || response.status === <span class="number">304</span> || response.status === <span class="number">201</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> response.data.data</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;,</span><br><span class="line">    error =&gt; &#123;</span><br><span class="line">        <span class="comment">//请求错误时做些事</span></span><br><span class="line">        <span class="keyword">if</span> (error &amp;&amp; error.response) &#123;</span><br><span class="line">            <span class="keyword">if</span> (error.response.status === <span class="number">400</span> || <span class="built_in">String</span>(error).indexOf(<span class="string">'code 400'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">                Message.error(error.response.data.message)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response.data)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (error.response.status === <span class="number">401</span> || <span class="built_in">String</span>(error).indexOf(<span class="string">'code 401'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">                Message.error(error.response.data.message)</span><br><span class="line">                <span class="comment">// 函数进入then后面的第二个err函数，如果没有就进入catch函数, 表单提交就可以根据这个重置参数以及重置按钮状态，防止按钮卡滞</span></span><br><span class="line">                <span class="comment">// return Promise.reject(error)</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">String</span>(error).indexOf(<span class="string">'code 500'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (error.response.data.message) &#123;</span><br><span class="line">                    Message.error(error.response.data.message)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Message.error(<span class="string">'服务器出现问题，请刷新重试'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 终止Promise调用链</span></span><br><span class="line">            <span class="keyword">return</span> error</span><br><span class="line">            <span class="comment">// return new Promise(() =&gt; &#123;&#125;)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否销毁拦截器</span></span><br><span class="line"><span class="comment">// 1.给拦截器起个名称 var myInterceptors = instance.interceptors.requesst.use();</span></span><br><span class="line"><span class="comment">// 2.instance.interceptors.request.eject(myInterceptor);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//模块化导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="keyword">get</span>(url, params = &#123;&#125;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!url) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">return</span> instance(&#123;</span><br><span class="line">            method: <span class="string">'get'</span>,</span><br><span class="line">            url: url,</span><br><span class="line">            params,</span><br><span class="line">            timeout: <span class="number">30000</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    post(url, data = &#123;&#125;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!url) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">return</span> instance(&#123;</span><br><span class="line">            method: <span class="string">'post'</span>,</span><br><span class="line">            url: url,</span><br><span class="line">            data,</span><br><span class="line">            timeout: <span class="number">3000000</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    postFile(url, data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!url) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">return</span> instance(&#123;</span><br><span class="line">            method: <span class="string">'post'</span>,</span><br><span class="line">            url: url,</span><br><span class="line">            data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    put(url, data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!url) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">return</span> instance(&#123;</span><br><span class="line">            method: <span class="string">'put'</span>,</span><br><span class="line">            url: url,</span><br><span class="line">            data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    patch(url, data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!url) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">return</span> instance(&#123;</span><br><span class="line">            method: <span class="string">'patch'</span>,</span><br><span class="line">            url: url,</span><br><span class="line">            data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">delete</span>(url, data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!url) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">return</span> instance(&#123;</span><br><span class="line">            method: <span class="string">'delete'</span>,</span><br><span class="line">            url: url,</span><br><span class="line">            data,</span><br><span class="line">            timeout: <span class="number">30000</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在自定义的分类api中把请求路径进行分类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"../axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> axios.post(<span class="string">"/api/login"</span>, params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">"/api/logout"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    login,</span><br><span class="line">    logout</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="store"><a href="#store" class="headerlink" title="store"></a>store</h4><h5 id="store-modules"><a href="#store-modules" class="headerlink" title="store-modules"></a>store-modules</h5><p>定义 wang.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getRegionData,&#125; <span class="keyword">from</span> <span class="string">"@/request/api/addPlan"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    City: [],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    setCity(state, payload) &#123;</span><br><span class="line">        state.City = payload;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="keyword">async</span> getCIty(&#123;</span><br><span class="line">        commit</span><br><span class="line">    &#125;, payload) &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> getRegionData(&#123;</span><br><span class="line">            access_token: payload.access_token</span><br><span class="line">        &#125;);</span><br><span class="line">        commit(<span class="string">"setCity"</span>, res.data);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,</span><br><span class="line">    state,</span><br><span class="line">    getters,</span><br><span class="line">    actions,</span><br><span class="line">    mutations</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意必须在store-index.js(入口)引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> wang <span class="keyword">from</span> <span class="string">'./modules/wang'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    wang,</span><br><span class="line">  &#125;,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="对于getters的使用"><a href="#对于getters的使用" class="headerlink" title="对于getters的使用"></a>对于getters的使用</h5><p>定义getters.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    City: <span class="function"><span class="params">state</span> =&gt;</span> state.wang.City,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br></pre></td></tr></table></figure><p>在页面.vue使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">computed: &#123;</span><br><span class="line">    ...mapGetters([<span class="string">"City"</span>])</span><br><span class="line">  &#125;,</span><br><span class="line"> methods:&#123;</span><br><span class="line">wang()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.City)</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="styles-css样式"><a href="#styles-css样式" class="headerlink" title="styles(css样式)"></a>styles(css样式)</h4><p>分成element.css(修改UI的样式),index.css（主要的样式）,reset.css（样式初始化）</p><p>index.js</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'./reset.css'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'./icon.css'</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">'./element.css'</span>;</span><br></pre></td></tr></table></figure><p>在main.js引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化css样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@/styles/index.css'</span></span><br></pre></td></tr></table></figure><h4 id="utils-工具"><a href="#utils-工具" class="headerlink" title="utils(工具)"></a>utils(工具)</h4><p>每个项目特有的工具函数，封装了对应项目需要的公共函数</p><h4 id="views-视图"><a href="#views-视图" class="headerlink" title="views(视图)"></a>views(视图)</h4><p>包含Home.vue (主体视图窗口)  布局容器的使用及插槽</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"home"</span>&gt;</span><br><span class="line">    &lt;!-- 主体框架 --&gt;</span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-aside :style=<span class="string">"isCollapse ? &#123;width:0+'px'&#125; : &#123;width:200+'px'&#125;"</span>&gt;</span><br><span class="line">        &lt;Aside /&gt;</span><br><span class="line">      &lt;<span class="regexp">/el-aside&gt;</span></span><br><span class="line"><span class="regexp">      &lt;el-container&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-header&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Header /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/el-header&gt;</span></span><br><span class="line"><span class="regexp">        &lt;!-- router-view插槽 --&gt;</span></span><br><span class="line"><span class="regexp">        &lt;el-main&gt;</span></span><br><span class="line"><span class="regexp">          &lt;router-view&gt;&lt;/</span>router-view&gt;</span><br><span class="line">        &lt;<span class="regexp">/el-main&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>el-container&gt;</span><br><span class="line">    &lt;<span class="regexp">/el-container&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt; </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">import &#123; mapGetters &#125; from "vuex";</span></span><br><span class="line"><span class="regexp">import Header from "../</span>components/header<span class="string">";</span></span><br><span class="line"><span class="string">import Aside from "</span>../components/aside<span class="string">";</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  computed: &#123;</span></span><br><span class="line"><span class="string">    ...mapGetters(["</span>isCollapse<span class="string">"])</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  name: "</span>home<span class="string">",</span></span><br><span class="line"><span class="string">  data() &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      width: 200</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  components: &#123;</span></span><br><span class="line"><span class="string">    Header,</span></span><br><span class="line"><span class="string">    Aside</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;style lang="</span>less<span class="string">" scoped&gt;</span></span><br><span class="line"><span class="string">.home &#123;</span></span><br><span class="line"><span class="string">  min-width: 1263px;</span></span><br><span class="line"><span class="string">  height: 100%;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure><p>在views定义的模板.vue都需要在路由进行引入</p><h3 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h3><p>只有一个路由插槽</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><h3 id="main-js-主要文件"><a href="#main-js-主要文件" class="headerlink" title="main.js(主要文件)"></a>main.js(主要文件)</h3><p>main用于外部资源的引入以及vue的全局绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'./request/axios'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/index'</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span> <span class="comment">//element-ui的全部组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span> <span class="comment">//element-ui的css</span></span><br><span class="line">Vue.use(ElementUI, &#123;</span><br><span class="line">  size: <span class="string">'small'</span>,</span><br><span class="line">  zIndex: <span class="number">3000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//全局绑定axios</span></span><br><span class="line">Vue.prototype.$http = axios;</span><br><span class="line"><span class="comment">//初始化css样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@/styles/index.css'</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h3 id="router-js-路由"><a href="#router-js-路由" class="headerlink" title="router.js(路由)"></a>router.js(路由)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./views/Home.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决导航栏重复点击跳转报错报错</span></span><br><span class="line"><span class="keyword">const</span> originalPush = Router.prototype.push</span><br><span class="line">Router.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">location</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> originalPush.call(<span class="keyword">this</span>, location).catch(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [&#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'home'</span>,</span><br><span class="line">      component: Home,</span><br><span class="line">      redirect: <span class="string">'/popularize'</span>,</span><br><span class="line">      children: [&#123;</span><br><span class="line">          path: <span class="string">'/popularize'</span>,</span><br><span class="line">          name: <span class="string">'popularize'</span>,</span><br><span class="line">          component: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'@/views/popularize/popularize.vue'</span>], resolve)</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在最新的vue-router中已经解决这个问题 可删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解决导航栏重复点击跳转报错报错</span></span><br><span class="line"><span class="keyword">const</span> originalPush = Router.prototype.push</span><br><span class="line">Router.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">location</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> originalPush.call(<span class="keyword">this</span>, location).catch(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由的懒加载方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">component: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'@/views/popularize/popularize.vue'</span>], resolve)</span><br><span class="line">component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/popularize/popularize.vue'</span>)</span><br></pre></td></tr></table></figure><h3 id="env-development（开发模式的环境变量）"><a href="#env-development（开发模式的环境变量）" class="headerlink" title=".env.development（开发模式的环境变量）"></a>.env.development（开发模式的环境变量）</h3><p>在开发中有一些需要单独抽离的变量</p><p>api请求的baseUrl(注意命名必须前缀带VUE_APP__)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_BASE_API =<span class="string">'http://dev.dsp.api.kuafugame.com'</span></span><br></pre></td></tr></table></figure><p>在axios.js中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.env.VUE_APP_BASE_API</span><br></pre></td></tr></table></figure><h3 id="env-production-上线后的环境变量，为打包所使用"><a href="#env-production-上线后的环境变量，为打包所使用" class="headerlink" title=".env.production(上线后的环境变量，为打包所使用)"></a>.env.production(上线后的环境变量，为打包所使用)</h3><p>.gitignore(npm忽略清单)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">node_modules</span><br><span class="line">/dist</span><br><span class="line"></span><br><span class="line"># local env files</span><br><span class="line">.env.local</span><br><span class="line">.env.*.local</span><br><span class="line"></span><br><span class="line"># Log files</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line"></span><br><span class="line"># Editor directories and files</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br><span class="line">*.sw?</span><br></pre></td></tr></table></figure><p>在项目准备上线后，请配置好vue.config.js</p><h3 id="脚手架配置"><a href="#脚手架配置" class="headerlink" title="脚手架配置"></a><a href="https://cli.vuejs.org/zh/config/" target="_blank" rel="noopener">脚手架配置</a></h3><h4 id="最基本的配置"><a href="#最基本的配置" class="headerlink" title="最基本的配置"></a>最基本的配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    publicPath: process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="string">"./"</span> : <span class="string">"/"</span>,</span><br><span class="line">    <span class="comment">// outputDir: 在npm run build时 生成文件的目录 type:string, default:'dist'</span></span><br><span class="line">    <span class="comment">// outputDir: 'dist',</span></span><br><span class="line">    <span class="comment">// pages:&#123; type:Object,Default:undfind &#125;</span></span><br><span class="line">    assetsDir: <span class="string">"./"</span>,</span><br><span class="line">    productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">80</span>, <span class="comment">// 端口号</span></span><br><span class="line">        host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        https: <span class="literal">false</span>, <span class="comment">// https:&#123;type:Boolean&#125;</span></span><br><span class="line">        disableHostCheck: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// open: true, //配置自动启动浏览器</span></span><br><span class="line">        <span class="comment">// proxy: 'http://dev.dsp.kuafugame.com/' // 配置跨域处理,只有一个代理</span></span><br><span class="line">        <span class="comment">// proxy: &#123;</span></span><br><span class="line">        <span class="comment">//   "/api": &#123;</span></span><br><span class="line">        <span class="comment">//     target: "&lt;url&gt;",</span></span><br><span class="line">        <span class="comment">//     ws: true,</span></span><br><span class="line">        <span class="comment">//     changeOrigin: true</span></span><br><span class="line">        <span class="comment">//   &#125;,</span></span><br><span class="line">        <span class="comment">//   "/foo": &#123;</span></span><br><span class="line">        <span class="comment">//     target: "&lt;other_url&gt;"</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">// &#125; // 配置多个代理</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="增加额外的配置"><a href="#增加额外的配置" class="headerlink" title="增加额外的配置"></a>增加额外的配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//压缩代码的npm包</span></span><br><span class="line"><span class="keyword">const</span> CompressionPlugin = <span class="built_in">require</span>(<span class="string">"compression-webpack-plugin"</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 判断是在什么环境下运行</span></span><br><span class="line">    publicPath: process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="string">"./"</span> : <span class="string">"/"</span>,</span><br><span class="line">    <span class="comment">// outputDir: 在npm run build时 生成文件的目录 type:string, default:'dist'</span></span><br><span class="line">    <span class="comment">// outputDir: 'dist',</span></span><br><span class="line">    <span class="comment">// pages:&#123; type:Object,Default:undfind &#125;</span></span><br><span class="line">    assetsDir: <span class="string">"./"</span>,</span><br><span class="line">    productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//修改端口号</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">80</span>, <span class="comment">// 端口号</span></span><br><span class="line">        host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        https: <span class="literal">false</span>, <span class="comment">// https:&#123;type:Boolean&#125;</span></span><br><span class="line">        <span class="comment">//内网打通</span></span><br><span class="line">        disableHostCheck: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// open: true, //配置自动启动浏览器</span></span><br><span class="line">        <span class="comment">// proxy: 'http://dev.dsp.kuafugame.com/' // 配置跨域处理,只有一个代理</span></span><br><span class="line">        <span class="comment">// proxy: &#123;</span></span><br><span class="line">        <span class="comment">//   "/api": &#123;</span></span><br><span class="line">        <span class="comment">//     target: "&lt;url&gt;",</span></span><br><span class="line">        <span class="comment">//     ws: true,</span></span><br><span class="line">        <span class="comment">//     changeOrigin: true</span></span><br><span class="line">        <span class="comment">//   &#125;,</span></span><br><span class="line">        <span class="comment">//   "/foo": &#123;</span></span><br><span class="line">        <span class="comment">//     target: "&lt;other_url&gt;"</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">// &#125; // 配置多个代理</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//合并一下webpack的配置</span></span><br><span class="line">    configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//外部引入第三方库，不想打包进vender时</span></span><br><span class="line">        config.externals = &#123;</span><br><span class="line">            <span class="string">'vue'</span>: <span class="string">'Vue'</span>,</span><br><span class="line">            <span class="string">'vue-router'</span>: <span class="string">'VueRouter'</span>,</span><br><span class="line">            <span class="string">'moment'</span>: <span class="string">'moment'</span>,</span><br><span class="line">            <span class="string">'axios'</span>: <span class="string">'axios'</span>,</span><br><span class="line">            <span class="string">'element-ui'</span>: <span class="string">'ELEMENT'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第三方插件--压缩代码</span></span><br><span class="line">        config.plugins.push(<span class="keyword">new</span> CompressionPlugin(&#123;</span><br><span class="line">            test: <span class="regexp">/\.js$|\.html$|.\css/</span>, <span class="comment">//匹配文件名</span></span><br><span class="line">            threshold: <span class="number">10240</span>, <span class="comment">//对超过10k的数据压缩</span></span><br><span class="line">            deleteOriginalAssets: <span class="literal">false</span> <span class="comment">//不删除源文件</span></span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//使打包时路由不会预先加载</span></span><br><span class="line">    chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        config.plugins.delete(<span class="string">"prefetch"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;项目结构&quot;&gt;&lt;a href=&quot;#项目结构&quot; class=&quot;headerlink&quot; title=&quot;项目结构&quot;&gt;&lt;/a&gt;项目结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/wang-zhibiao/imageLib/blob/master
      
    
    </summary>
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://wang-zhibiao.github.io/tags/vue/"/>
    
      <category term="vue-cli3.0" scheme="http://wang-zhibiao.github.io/tags/vue-cli3-0/"/>
    
  </entry>
  
  <entry>
    <title>防抖和节流的使用</title>
    <link href="http://wang-zhibiao.github.io/2019/12/11/vue%E4%B8%AD%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://wang-zhibiao.github.io/2019/12/11/vue中防抖和节流的使用/</id>
    <published>2019-12-11T03:11:11.000Z</published>
    <updated>2020-01-03T13:59:52.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数防抖（debounce）"><a href="#函数防抖（debounce）" class="headerlink" title="函数防抖（debounce）"></a>函数防抖（debounce）</h2><blockquote><p>所谓防抖，就是指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timeout = <span class="literal">null</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> debounce = <span class="function">(<span class="params">func, delay</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//如果定时器不等于null就清除定时器</span></span><br><span class="line">    <span class="keyword">if</span> (timeout !== <span class="literal">null</span>) clearTimeout(timeout)</span><br><span class="line">    <span class="comment">//设置定时器延时执行函数</span></span><br><span class="line">    timeout = setTimeout(func, delay)<span class="comment">//如果在这个delay时间内执行了setTimeout，否者就会被下一个执行所清除，这样就是一个接一个进行执行，但是只执行最后一个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数节流-Throttle"><a href="#函数节流-Throttle" class="headerlink" title="函数节流(Throttle)"></a>函数节流(Throttle)</h2><blockquote><p>所谓节流，就是指连续触发事件但是在 n 秒中只执行一次函数。节流会稀释函数的执行频。就相当于，一个水龙头在滴水，可能一次性会滴很多滴，但是我们只希望它每隔 500ms 滴一滴水，保持这个频率。即我们希望函数在以一个可以接受的频率重复调用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> start = <span class="number">0</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Throttle = <span class="function">(<span class="params">func, wait, trailing</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在函数调用时，获取时间戳</span></span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="comment">//判断剩下的等待时间</span></span><br><span class="line">    <span class="keyword">let</span> remaining = wait - (now - start)</span><br><span class="line">    <span class="built_in">console</span>.log(remaining)</span><br><span class="line">    <span class="comment">// 拦截：延迟时间&gt;多次执行间隔时间，执行：多次执行间隔时间&gt;延迟时间</span></span><br><span class="line">    <span class="keyword">if</span> ((now - start) &gt;= wait) &#123;</span><br><span class="line">        <span class="comment">// 由于setTimeout存在最小时间精度问题，因此会存在到达wait的时间间隔</span></span><br><span class="line">        <span class="comment">// 但之前设置的setTimeout操作还没被执行，因此为保险起见，这里先清理setTimeout操作</span></span><br><span class="line">        timer &amp;&amp; clearTimeout(timer)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">        start = now</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'非频繁操作，点击间隔为：'</span>, remaining)</span><br><span class="line">        <span class="comment">//返回回调的函数-》不管this指向</span></span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timer &amp;&amp; trailing) &#123;</span><br><span class="line">        <span class="comment">// trailing有值时，延时执行func函数</span></span><br><span class="line">        <span class="comment">// 频繁操作，第一次设置定时器之后，之后的不会再走到这里创建定时器</span></span><br><span class="line">        <span class="comment">// 清除问题，只能在第二有效点击的时候才会清除</span></span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            timer = <span class="literal">null</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'频繁操作，定时器延时执行'</span>)</span><br><span class="line">            <span class="keyword">return</span> func</span><br><span class="line">        &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数防抖（debounce）&quot;&gt;&lt;a href=&quot;#函数防抖（debounce）&quot; class=&quot;headerlink&quot; title=&quot;函数防抖（debounce）&quot;&gt;&lt;/a&gt;函数防抖（debounce）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所谓防抖，就是指触
      
    
    </summary>
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://wang-zhibiao.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>node的使用</title>
    <link href="http://wang-zhibiao.github.io/2019/12/07/node/"/>
    <id>http://wang-zhibiao.github.io/2019/12/07/node/</id>
    <published>2019-12-07T04:10:56.000Z</published>
    <updated>2019-12-07T15:27:48.530Z</updated>
    
    <content type="html"><![CDATA[<p>node的跨域解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.all(<span class="string">'*'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild'</span>);</span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'PUT, POST, GET, DELETE, OPTIONS'</span>);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (req.method == <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">    res.send(<span class="number">200</span>); <span class="regexp">/让options请求快速返回/</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>获取本地IP</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIPAdress</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> interfaces = <span class="built_in">require</span>(<span class="string">'os'</span>).networkInterfaces();  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> devName <span class="keyword">in</span> interfaces)&#123;  </span><br><span class="line">          <span class="keyword">var</span> iface = interfaces[devName];  </span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;iface.length;i++)&#123;  </span><br><span class="line">               <span class="keyword">var</span> alias = iface[i];  </span><br><span class="line">               <span class="keyword">if</span>(alias.family === <span class="string">'IPv4'</span> &amp;&amp; alias.address !== <span class="string">'127.0.0.1'</span> &amp;&amp; !alias.internal)&#123;  </span><br><span class="line">                     <span class="keyword">return</span> alias.address;  </span><br><span class="line">               &#125;  </span><br><span class="line">          &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;node的跨域解决&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;
      
    
    </summary>
    
      <category term="node" scheme="http://wang-zhibiao.github.io/categories/node/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="http" scheme="http://wang-zhibiao.github.io/tags/http/"/>
    
      <category term="node" scheme="http://wang-zhibiao.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>前端常用Git命令</title>
    <link href="http://wang-zhibiao.github.io/2019/11/25/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/"/>
    <id>http://wang-zhibiao.github.io/2019/11/25/前端常用git命令/</id>
    <published>2019-11-25T04:00:56.000Z</published>
    <updated>2019-12-07T15:28:24.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端常用Git命令"><a href="#前端常用Git命令" class="headerlink" title="前端常用Git命令"></a>前端常用Git命令</h1><p>2019-11-03   文章字数:   1,892 阅读时间:   8 分</p><blockquote><p>本文主要讲述前端开发中主要使用的Git相关方法，一部分整理于网上，一部分整理于自己平常使用的。只提供了基础的命令，如果想要更详细解答的小伙伴可以Google命令查询，如有错误，欢迎指出。</p></blockquote><h4 id="常见信息"><a href="#常见信息" class="headerlink" title="常见信息"></a>常见信息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">master: 默认开发分支origin：默认远程版本库Head: 默认开发分支Head^:Head 的父提交</span><br></pre></td></tr></table></figure><h4 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git initgit init [project-name]   # 新建一个目录，并将其初始化为git仓库</span><br><span class="line">git clone [url]           # 拷贝一个git仓库到本地</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Git 的配置文件是 .gitconfig，可以放在用户的主目录（全局配置）下或项目目录下（项目配置） 。</span><br><span class="line"># 显示当前的 git 配置</span><br><span class="line">git config --list  </span><br><span class="line"># 编辑 Git 配置</span><br><span class="line">git config -e [--global] </span><br><span class="line"># 设置用来提交代码的用户信息</span><br><span class="line">git config [--global] user.name <span class="string">"[name]"</span> </span><br><span class="line">git config [--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure><h4 id="添加删除文件"><a href="#添加删除文件" class="headerlink" title="添加删除文件"></a>添加删除文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 将指定文件添加到暂存区</span><br><span class="line">git add [file1] [file2] ... </span><br><span class="line"># 将指定目录添加到暂存区，包括子目录</span><br><span class="line">git add [dir]               </span><br><span class="line"># 将当前目录中的所有文件添加到暂存区</span><br><span class="line">git add .                   </span><br><span class="line"># 对同一个文件多次更改，建议分开提交</span><br><span class="line">git add -p                  </span><br><span class="line"># 将指定文件从工作区删除，并将本次删除添加到暂存区</span><br><span class="line">git rm [file1] [file2] ...  </span><br><span class="line"># 停止追踪指定的文件，不会删除文件</span><br><span class="line">git rm --cached [file]      </span><br><span class="line"># 对指定文件进行重命名，并添加到暂存区中</span><br><span class="line">git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 将暂存区中的文件提交到代码仓库</span><br><span class="line">git commit -m [message]  </span><br><span class="line"># 将指定的文件从暂存区中提交到仓库</span><br><span class="line">git commit [file1] [file2] ... -m [message] </span><br><span class="line"># 将工作区的更改直接提交到仓库</span><br><span class="line">git commit -a </span><br><span class="line"># 提交前展示所有的变动</span><br><span class="line">git commit -v </span><br><span class="line"># 使用新提交代替上次提交，如果代码没有任何变动，将会用于重写上次提交的提交信息</span><br><span class="line">git commit --amend -m [message] </span><br><span class="line"># 重做上次的提交，并将指定的文件包含其中</span><br><span class="line">git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h4 id="分支相关"><a href="#分支相关" class="headerlink" title="分支相关"></a>分支相关</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 列出本地分支</span><br><span class="line">git branch  </span><br><span class="line"># 列出所有远程分支</span><br><span class="line">git branch -r </span><br><span class="line"># 列出本地和远程的所有分支</span><br><span class="line">git branch -a </span><br><span class="line"># 新建分支，并留在当前分支</span><br><span class="line">git branch [branch-name] </span><br><span class="line"># 新建分支，并切换到新建分支</span><br><span class="line">git checkout -b [branch-name] </span><br><span class="line"># 指向某次提交新建分支</span><br><span class="line">git branch [branch] [commit] </span><br><span class="line"># 创建一个新分支，并与指定的远程分支建立跟踪关系</span><br><span class="line">git branch --track [branch] [remote-branch] </span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">git checkout [branch-name] </span><br><span class="line"># 切换到上一个分支git checkout - </span><br><span class="line"># 将本地分支与指定的远程分支建立跟踪关心</span><br><span class="line">git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"># 合并指定分支与当前分支git merge [branch] </span><br><span class="line"># 将指定的提交合并到本地分支git cheery-pick [commit] </span><br><span class="line"># 删除本地指定分支</span><br><span class="line">git branch -d [branch-name] </span><br><span class="line"># 删除远程分支</span><br><span class="line">git push origin --delete [branch-name]git push -dr [remote/branch]</span><br></pre></td></tr></table></figure><h4 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 列出所有标签</span><br><span class="line">git tag</span><br><span class="line"># 在当前 tag 上创建一个新标签</span><br><span class="line">git tag [tag]</span><br><span class="line"># 在指定 tag 上创建一个新标签</span><br><span class="line">git tag [tag] [commit]</span><br><span class="line"># 删除本地标签</span><br><span class="line">git tag -d [tag]</span><br><span class="line"># 删除远程标签</span><br><span class="line">git push origin :refs/tags/[tagName]</span><br><span class="line"># 查看标签信息</span><br><span class="line">git show [tag]</span><br><span class="line"># 提交指定标签</span><br><span class="line">git push [remote] --tags</span><br><span class="line"># 创建一个新分支，指向特定的标签</span><br><span class="line">git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 显示有变动的文件</span><br><span class="line">git status</span><br><span class="line"># 显示当前分支的提交历史</span><br><span class="line">git log</span><br><span class="line"># 显示提交历史和每次提交的文件</span><br><span class="line">git log --stat</span><br><span class="line"># 指定关键字搜索提交历史</span><br><span class="line">git log -S [keyword]</span><br><span class="line"># 显示自某次提交以来的所有更改，一次提交显示一行</span><br><span class="line">git log [tag] HEAD --pretty=format:$s</span><br><span class="line"># 显示自某次提交以来的所有更改，其提交描述必须符合搜索条件</span><br><span class="line">git log [tag] HEAD --grep feature</span><br><span class="line"># 显示指定文件的提交历史</span><br><span class="line">git log --flollow [file]git whatchanged [file]</span><br><span class="line"># 显示与指定文件相关的每个差异</span><br><span class="line">git log -p [file]</span><br><span class="line"># 显示最近 5 次提交</span><br><span class="line">git log -5 --pretty --oneline</span><br><span class="line"># 显示所有的提交用户，已提交数目多少排名</span><br><span class="line">git shortlog -sn</span><br><span class="line"># 显示指定文件何时被何人修改过</span><br><span class="line">git blame [file]</span><br><span class="line"># 显示暂存区和工作区文件差别</span><br><span class="line">git diff</span><br><span class="line"># 显示暂存区和上一次提交的差别</span><br><span class="line">git diff --cached [file]</span><br><span class="line"># 显示工作区和当前分支的最近一次提交的差别</span><br><span class="line">git diff HEAD</span><br><span class="line"># 显示指定两次提交的差别</span><br><span class="line">git diff [first-branch]...[second-branch]</span><br><span class="line"># 显示今天提交了多少代码</span><br><span class="line">git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"># 显示特定提交的提交信息和更改的内容</span><br><span class="line">git show [commit]</span><br><span class="line"># 某次提交改动了哪些文件</span><br><span class="line">git show --name-only [commit]</span><br><span class="line"># 显示某个提交的特定文件的内容</span><br><span class="line">git show [commit]:[filename]</span><br><span class="line"># 显示当前分支的最新提交</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure><h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 从远程分支下载所有变动</span><br><span class="line">git fetch [remote]</span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">git remote -v</span><br><span class="line"># 显示某个远程参考信息</span><br><span class="line">git remote show [remote]</span><br><span class="line"># 新建一个远程仓库，并命名</span><br><span class="line">git remote add [shortname] [url]</span><br><span class="line"># 检索远程村粗库的更改，并与本地分支合并</span><br><span class="line">git pull [remote] [branch]</span><br><span class="line"># 将本地分支提交到远程仓库</span><br><span class="line">git push [remote] [branch]</span><br><span class="line"># 将当前分支强制提交到远程仓库，即使有冲突存在</span><br><span class="line">git push [remote] --force</span><br><span class="line"># 将所有分支提交到远程仓库</span><br><span class="line">git push [remote] --all</span><br><span class="line">#### 撤销操作</span><br><span class="line"># 将暂存区中的指定文件还原到工作区，保留文件变动</span><br><span class="line">git checkout [file]</span><br><span class="line"># 将指定文件从某个提交还原到暂存区和工作区</span><br><span class="line">git checkout [commit] [file]</span><br><span class="line"># 将暂存区中的所有文件还原到工作区</span><br><span class="line">git checkout .</span><br><span class="line"># 重置暂存区中的指定文件，与先前的提交保持一致，但保持工作空间的变动不变</span><br><span class="line">git reset [file]</span><br><span class="line"># 重置暂存区和工作区中的指定文件，并与最近一次提交保持一致，工作空间文件变动不会保留</span><br><span class="line">git reset --hard</span><br><span class="line"># 重置暂存区，指向指定的某次提交，工作区的内容不会被覆盖</span><br><span class="line">git reset [commit]</span><br><span class="line"># 重置暂存区和工作区中的指定文件，并与指定的某次提交保持一致，工作区的内容会被覆盖</span><br><span class="line">git reset --hard [commit]</span><br><span class="line"># 将 HEAD 重置为指定的某次提交，保持暂存区和工作区的内容不变</span><br><span class="line">git reset --keep [commit]</span><br><span class="line"># 新建新提交以撤销指定的提交</span><br><span class="line">git revert [commit]</span><br><span class="line"># 暂存为提交的变动，并在稍后移动它们</span><br><span class="line">git stashgit stash popgit stash apply</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成用于发布的存档</span><br><span class="line">git archive</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端常用Git命令&quot;&gt;&lt;a href=&quot;#前端常用Git命令&quot; class=&quot;headerlink&quot; title=&quot;前端常用Git命令&quot;&gt;&lt;/a&gt;前端常用Git命令&lt;/h1&gt;&lt;p&gt;2019-11-03   文章字数:   1,892 阅读时间:   8 分&lt;/p&gt;
      
    
    </summary>
    
      <category term="基础" scheme="http://wang-zhibiao.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="Git" scheme="http://wang-zhibiao.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>前端常用rule验证规则</title>
    <link href="http://wang-zhibiao.github.io/2019/11/24/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8rule%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%99/"/>
    <id>http://wang-zhibiao.github.io/2019/11/24/前端常用rule验证规则/</id>
    <published>2019-11-24T03:00:56.000Z</published>
    <updated>2019-12-07T15:29:18.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><blockquote><p>在 vue开发中，难免遇到各种表单校验，这里整理了网络上和自己平时高频率用到的一些校验方法。如果错误欢迎指出，后期不断补充更新。</p></blockquote><h3 id="1、是否合法IP地址"><a href="#1、是否合法IP地址" class="headerlink" title="1、是否合法IP地址"></a>1、是否合法IP地址</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateIP</span>(<span class="params">rule, value,callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(value==<span class="string">''</span>||value==<span class="literal">undefined</span>||value==<span class="literal">null</span>)&#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/^(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])$/</span>;</span><br><span class="line">    <span class="keyword">if</span> ((!reg.test(value)) &amp;&amp; value != <span class="string">''</span>) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正确的IP地址'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、是否手机号码或者固话"><a href="#2、是否手机号码或者固话" class="headerlink" title="2、是否手机号码或者固话"></a>2、是否手机号码或者固话</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validatePhoneTwo</span>(<span class="params">rule, value, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^((0\d&#123;2,3&#125;-\d&#123;7,8&#125;)|(1[34578]\d&#123;9&#125;))$/</span>;;</span><br><span class="line">  <span class="keyword">if</span> (value == <span class="string">''</span> || value == <span class="literal">undefined</span> || value == <span class="literal">null</span>) &#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((!reg.test(value)) &amp;&amp; value != <span class="string">''</span>) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正确的电话号码或者固话号码'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、是否固话"><a href="#3、是否固话" class="headerlink" title="3、是否固话"></a>3、是否固话</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateTelphone</span>(<span class="params">rule, value,callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg =<span class="regexp">/0\d&#123;2,3&#125;-\d&#123;7,8&#125;/</span>;</span><br><span class="line">  <span class="keyword">if</span>(value==<span class="string">''</span>||value==<span class="literal">undefined</span>||value==<span class="literal">null</span>)&#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((!reg.test(value)) &amp;&amp; value != <span class="string">''</span>) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正确的固定电话）'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、是否手机号码"><a href="#4、是否手机号码" class="headerlink" title="4、是否手机号码"></a>4、是否手机号码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validatePhone</span>(<span class="params">rule, value,callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg =<span class="regexp">/^[1][3-9][0-9]&#123;9&#125;$/</span>;</span><br><span class="line">  <span class="keyword">if</span>(value==<span class="string">''</span>||value==<span class="literal">undefined</span>||value==<span class="literal">null</span>)&#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((!reg.test(value)) &amp;&amp; value != <span class="string">''</span>) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正确的电话号码'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、是否身份证号码"><a href="#5、是否身份证号码" class="headerlink" title="5、是否身份证号码"></a>5、是否身份证号码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateIdNo</span>(<span class="params">rule, value,callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>;</span><br><span class="line">  <span class="keyword">if</span>(value==<span class="string">''</span>||value==<span class="literal">undefined</span>||value==<span class="literal">null</span>)&#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((!reg.test(value)) &amp;&amp; value != <span class="string">''</span>) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正确的身份证号码'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、是否邮箱"><a href="#6、是否邮箱" class="headerlink" title="6、是否邮箱"></a>6、是否邮箱</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateEMail</span>(<span class="params">rule, value,callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg =<span class="regexp">/^([a-zA-Z0-9]+[-_\.]?)+@[a-zA-Z0-9]+\.[a-z]+$/</span>;</span><br><span class="line">  <span class="keyword">if</span>(value==<span class="string">''</span>||value==<span class="literal">undefined</span>||value==<span class="literal">null</span>)&#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!reg.test(value))&#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正确的邮箱'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、合法url"><a href="#7、合法url" class="headerlink" title="7、合法url"></a>7、合法url</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateURL</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> urlregex = <span class="regexp">/^(https?|ftp):\/\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|1[0-9]&#123;2&#125;|[1-9]?[0-9]))&#123;3&#125;|([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]&#123;2&#125;))(:[0-9]+)*(\/($|[a-zA-Z0-9.,?'\\+&amp;%$#=~_-]+))*$/</span>;</span><br><span class="line">  <span class="keyword">return</span> urlregex.test(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、验证内容是否包含英文数字以及下划线"><a href="#8、验证内容是否包含英文数字以及下划线" class="headerlink" title="8、验证内容是否包含英文数字以及下划线"></a>8、验证内容是否包含英文数字以及下划线</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isPassword</span>(<span class="params">rule, value, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg =<span class="regexp">/^[_a-zA-Z0-9]+$/</span>;</span><br><span class="line">  <span class="keyword">if</span>(value==<span class="string">''</span>||value==<span class="literal">undefined</span>||value==<span class="literal">null</span>)&#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!reg.test(value))&#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'仅由英文字母，数字以及下划线组成'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9、自动检验数值的范围"><a href="#9、自动检验数值的范围" class="headerlink" title="9、自动检验数值的范围"></a>9、自动检验数值的范围</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">checkMax20000</span>(<span class="params">rule, value, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value == <span class="string">''</span> || value == <span class="literal">undefined</span> || value == <span class="literal">null</span>) &#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">Number</span>(value)) &#123;</span><br><span class="line">    callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入[1,20000]之间的数字'</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &lt; <span class="number">1</span> || value &gt; <span class="number">20000</span>) &#123;</span><br><span class="line">    callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入[1,20000]之间的数字'</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10、验证数字输入框最大数值"><a href="#10、验证数字输入框最大数值" class="headerlink" title="10、验证数字输入框最大数值"></a>10、验证数字输入框最大数值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">checkMaxVal</span>(<span class="params">rule, value,callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value &lt; <span class="number">0</span> || value &gt; 最大值) &#123;</span><br><span class="line">    callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入[0,最大值]之间的数字'</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11、验证是否1-99之间"><a href="#11、验证是否1-99之间" class="headerlink" title="11、验证是否1-99之间"></a>11、验证是否1-99之间</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isOneToNinetyNine</span>(<span class="params">rule, value, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'输入不可以为空'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Number</span>(value)) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正整数'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> re = <span class="regexp">/^[1-9][0-9]&#123;0,1&#125;$/</span>;</span><br><span class="line">      <span class="keyword">const</span> rsCheck = re.test(value);</span><br><span class="line">      <span class="keyword">if</span> (!rsCheck) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正整数，值为【1,99】'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12、验证是否整数"><a href="#12、验证是否整数" class="headerlink" title="12、验证是否整数"></a>12、验证是否整数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isInteger</span>(<span class="params">rule, value, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'输入不可以为空'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Number</span>(value)) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正整数'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> re = <span class="regexp">/^[0-9]*[1-9][0-9]*$/</span>;</span><br><span class="line">      <span class="keyword">const</span> rsCheck = re.test(value);</span><br><span class="line">      <span class="keyword">if</span> (!rsCheck) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正整数'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13、验证是否整数-非必填"><a href="#13、验证是否整数-非必填" class="headerlink" title="13、验证是否整数,非必填"></a>13、验证是否整数,非必填</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isIntegerNotMust</span>(<span class="params">rule, value, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Number</span>(value)) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正整数'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> re = <span class="regexp">/^[0-9]*[1-9][0-9]*$/</span>;</span><br><span class="line">      <span class="keyword">const</span> rsCheck = re.test(value);</span><br><span class="line">      <span class="keyword">if</span> (!rsCheck) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正整数'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14、-验证是否是-0-1-的小数"><a href="#14、-验证是否是-0-1-的小数" class="headerlink" title="14、 验证是否是[0-1]的小数"></a>14、 验证是否是[0-1]的小数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isDecimal</span>(<span class="params">rule, value, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'输入不可以为空'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Number</span>(value)) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入[0,1]之间的数字'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (value &lt; <span class="number">0</span> || value &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入[0,1]之间的数字'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="15、-验证是否是-1-10-的小数-即不可以等于0"><a href="#15、-验证是否是-1-10-的小数-即不可以等于0" class="headerlink" title="15、 验证是否是[1-10]的小数,即不可以等于0"></a>15、 验证是否是[1-10]的小数,即不可以等于0</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isBtnOneToTen</span>(<span class="params">rule, value, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'输入不可以为空'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Number</span>(value)) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正整数，值为[1,10]'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!(value == <span class="string">'1'</span> || value == <span class="string">'2'</span> || value == <span class="string">'3'</span> || value == <span class="string">'4'</span> || value == <span class="string">'5'</span> || value == <span class="string">'6'</span> || value == <span class="string">'7'</span> || value == <span class="string">'8'</span> || value == <span class="string">'9'</span> || value == <span class="string">'10'</span>)) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入正整数，值为[1,10]'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16、验证是否是-1-100-的小数-即不可以等于0"><a href="#16、验证是否是-1-100-的小数-即不可以等于0" class="headerlink" title="16、验证是否是[1-100]的小数,即不可以等于0"></a>16、验证是否是[1-100]的小数,即不可以等于0</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isBtnOneToHundred</span>(<span class="params">rule, value, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'输入不可以为空'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Number</span>(value)) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入整数，值为[1,100]'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (value &lt; <span class="number">1</span> || value &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入整数，值为[1,100]'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17、验证是否是-0-100-的小数"><a href="#17、验证是否是-0-100-的小数" class="headerlink" title="17、验证是否是[0-100]的小数"></a>17、验证是否是[0-100]的小数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isBtnZeroToHundred</span>(<span class="params">rule, value, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'输入不可以为空'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Number</span>(value)) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入[1,100]之间的数字'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (value &lt; <span class="number">0</span> || value &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入[1,100]之间的数字'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18、验证端口是否在-0-65535-之间"><a href="#18、验证端口是否在-0-65535-之间" class="headerlink" title="18、验证端口是否在[0,65535]之间"></a>18、验证端口是否在[0,65535]之间</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isPort</span>(<span class="params">rule, value, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'输入不可以为空'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="string">''</span> || <span class="keyword">typeof</span>(value) == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入端口值'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> re = <span class="regexp">/^([0-9]|[1-9]\d|[1-9]\d&#123;2&#125;|[1-9]\d&#123;3&#125;|[1-5]\d&#123;4&#125;|6[0-4]\d&#123;3&#125;|65[0-4]\d&#123;2&#125;|655[0-2]\d|6553[0-5])$/</span>;</span><br><span class="line">      <span class="keyword">const</span> rsCheck = re.test(value);</span><br><span class="line">      <span class="keyword">if</span> (!rsCheck) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入在[0-65535]之间的端口值'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19、验证端口是否在-0-65535-之间，非必填-isMust表示是否必填"><a href="#19、验证端口是否在-0-65535-之间，非必填-isMust表示是否必填" class="headerlink" title="19、验证端口是否在[0,65535]之间，非必填,isMust表示是否必填"></a>19、验证端口是否在[0,65535]之间，非必填,isMust表示是否必填</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isCheckPort</span>(<span class="params">rule, value, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="string">''</span> || <span class="keyword">typeof</span>(value) == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="comment">//callback(new Error('请输入端口值'));</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> re = <span class="regexp">/^([0-9]|[1-9]\d|[1-9]\d&#123;2&#125;|[1-9]\d&#123;3&#125;|[1-5]\d&#123;4&#125;|6[0-4]\d&#123;3&#125;|65[0-4]\d&#123;2&#125;|655[0-2]\d|6553[0-5])$/</span>;</span><br><span class="line">      <span class="keyword">const</span> rsCheck = re.test(value);</span><br><span class="line">      <span class="keyword">if</span> (!rsCheck) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入在[0-65535]之间的端口值'</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20、小写字母"><a href="#20、小写字母" class="headerlink" title="20、小写字母"></a>20、小写字母</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateLowerCase</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^[a-z]+$/</span>;</span><br><span class="line">  <span class="keyword">return</span> reg.test(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22、两位小数验证"><a href="#22、两位小数验证" class="headerlink" title="22、两位小数验证"></a>22、两位小数验证</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> validateValidity = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/(^[1-9]([0-9]+)?(\.[0-9]&#123;1,2&#125;)?$)|(^(0)&#123;1&#125;$)|(^[0-9]\.[0-9]([0-9])?$)/</span>.test(value)) &#123;</span><br><span class="line">    callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'最多两位小数！！！'</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="23、是否大写字母"><a href="#23、是否大写字母" class="headerlink" title="23、是否大写字母"></a>23、是否大写字母</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateUpperCase</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^[A-Z]+$/</span>;</span><br><span class="line">  <span class="keyword">return</span> reg.test(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="24、是否大小写字母"><a href="#24、是否大小写字母" class="headerlink" title="24、是否大小写字母"></a>24、是否大小写字母</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validatAlphabets</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^[A-Za-z]+$/</span>;</span><br><span class="line">  <span class="keyword">return</span> reg.test(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="25、密码校验"><a href="#25、密码校验" class="headerlink" title="25、密码校验"></a>25、密码校验</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> validatePsdReg = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入密码'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^(?![\d]+$)(?![a-zA-Z]+$)(?![^\da-zA-Z]+$)([^\u4e00-\u9fa5\s])&#123;6,20&#125;$/</span>.test(value)) &#123;</span><br><span class="line">    callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入6-20位英文字母、数字或者符号（除空格），且字母、数字和标点符号至少包含两种'</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    callback()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="26、中文校验"><a href="#26、中文校验" class="headerlink" title="26、中文校验"></a>26、中文校验</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> validateContacts = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入中文'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^[\u0391-\uFFE5A-Za-z]+$/</span>.test(value)) &#123;</span><br><span class="line">    callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'不可输入特殊字符'</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    callback()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="27、-账号校验"><a href="#27、-账号校验" class="headerlink" title="27、 账号校验"></a>27、 账号校验</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> validateCode = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入账号'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^(?![0-9]*$)(?![a-zA-Z]*$)[a-zA-Z0-9]&#123;6,20&#125;$/</span>.test(value)) &#123;</span><br><span class="line">    callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'账号必须为6-20位字母和数字组合'</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    callback()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="28-、纯数字校验"><a href="#28-、纯数字校验" class="headerlink" title="28 、纯数字校验"></a>28 、纯数字校验</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> validateNumber = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> numberReg = <span class="regexp">/^\d+$|^\d+[.]?\d+$/</span></span><br><span class="line">    <span class="keyword">if</span> (value !== <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!numberReg.test(value)) &#123;</span><br><span class="line">            callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入数字'</span>))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            callback()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'请输入值'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="29、最多一位小数"><a href="#29、最多一位小数" class="headerlink" title="29、最多一位小数"></a>29、最多一位小数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> onePoint = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^[0-9]+([.]&#123;1&#125;[0-9]&#123;1&#125;)?$/</span>.test(value)) &#123;</span><br><span class="line">    callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'最多一位小数！！！'</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><blockquote><p>在使用地方直接 import 引入，然后在 rules 校验中加入即可。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">属性: [&#123; <span class="attr">validator</span>: validatePass, <span class="attr">trigger</span>: <span class="string">"blur"</span> &#125;],</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在 vue开发中，难免遇到各种表单校验，这里整理了网络上和自己平时高频率用到的一些校验方法。如果错误欢迎指出，后期
      
    
    </summary>
    
      <category term="vue基础" scheme="http://wang-zhibiao.github.io/categories/vue%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://wang-zhibiao.github.io/tags/vue/"/>
    
      <category term="rule" scheme="http://wang-zhibiao.github.io/tags/rule/"/>
    
  </entry>
  
  <entry>
    <title>http编码</title>
    <link href="http://wang-zhibiao.github.io/2019/11/15/http%E7%BC%96%E7%A0%81/"/>
    <id>http://wang-zhibiao.github.io/2019/11/15/http编码/</id>
    <published>2019-11-15T04:10:56.000Z</published>
    <updated>2019-12-07T15:25:07.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><blockquote><p>1**(信息类)：表示接收到请求并且继续处理 100——客户必须继续发出请求 101——客户要求服务器根据请求转换HTTP协议版本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">2**(响应成功)：表示动作被成功接收、理解和接受</span><br><span class="line">200——表明该请求被成功地完成，所请求的资源发送回客户端</span><br><span class="line">201——提示知道新文件的URL</span><br><span class="line">202——接受和处理、但处理未完成</span><br><span class="line">203——返回信息不确定或不完整</span><br><span class="line">204——请求收到，但返回信息为空</span><br><span class="line">205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件</span><br><span class="line">206——服务器已经完成了部分用户的GET请求</span><br><span class="line"></span><br><span class="line">3**(重定向类)：为了完成指定的动作，必须接受进一步处理</span><br><span class="line">300——请求的资源可在多处得到</span><br><span class="line">301——本网页被永久性转移到另一个URL</span><br><span class="line">302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。</span><br><span class="line">303——建议客户访问其他URL或访问方式</span><br><span class="line">304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用</span><br><span class="line">305——请求的资源必须从服务器指定的地址得到</span><br><span class="line">306——前一版本HTTP中使用的代码，现行版本中不再使用</span><br><span class="line">307——申明请求的资源临时性删除</span><br><span class="line"></span><br><span class="line">4**(客户端错误类)：请求包含错误语法或不能正确执行</span><br><span class="line">400——客户端请求有语法错误，不能被服务器所理解</span><br><span class="line">401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</span><br><span class="line">HTTP 401.1 - 未授权：登录失败</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 401.2 - 未授权：服务器配置问题导致登录失败</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 401.3 - ACL 禁止访问资源</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 401.4 - 未授权：授权被筛选器拒绝</span><br><span class="line">HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败</span><br><span class="line">402——保留有效ChargeTo头响应</span><br><span class="line">403——禁止访问，服务器收到请求，但是拒绝提供服务</span><br><span class="line">HTTP 403.1 禁止访问：禁止可执行访问</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 403.2 - 禁止访问：禁止读访问</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 403.3 - 禁止访问：禁止写访问</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 403.4 - 禁止访问：要求 SSL</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 403.5 - 禁止访问：要求 SSL 128</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 403.6 - 禁止访问：IP 地址被拒绝</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 403.7 - 禁止访问：要求客户证书</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 403.8 - 禁止访问：禁止站点访问</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 403.9 - 禁止访问：连接的用户过多</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 403.10 - 禁止访问：配置无效</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 403.11 - 禁止访问：密码更改</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 403.12 - 禁止访问：映射器拒绝访问</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 403.13 - 禁止访问：客户证书已被吊销</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 403.15 - 禁止访问：客户访问许可过多</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 403.16 - 禁止访问：客户证书不可信或者无效</span><br><span class="line">HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效</span><br><span class="line">404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL</span><br><span class="line">405——用户在Request-Line字段定义的方法不允许</span><br><span class="line">406——根据用户发送的Accept拖，请求资源不可访问</span><br><span class="line">407——类似401，用户必须首先在代理服务器上得到授权</span><br><span class="line">408——客户端没有在用户指定的饿时间内完成请求</span><br><span class="line">409——对当前资源状态，请求不能完成</span><br><span class="line">410——服务器上不再有此资源且无进一步的参考地址</span><br><span class="line">411——服务器拒绝用户定义的Content-Length属性请求</span><br><span class="line">412——一个或多个请求头字段在当前请求中错误</span><br><span class="line">413——请求的资源大于服务器允许的大小</span><br><span class="line">414——请求的资源URL长于服务器允许的长度</span><br><span class="line">415——请求资源不支持请求项目格式</span><br><span class="line">416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段</span><br><span class="line">417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。</span><br><span class="line"></span><br><span class="line">5**(服务端错误类)：服务器不能正确执行一个正确的请求</span><br><span class="line">HTTP 500 - 服务器遇到错误，无法完成请求</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 500.100 - 内部服务器错误 - ASP 错误</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 500-11 服务器关闭</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 500-12 应用程序重新启动</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 500-13 - 服务器太忙</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 500-14 - 应用程序无效</span><br><span class="line">&amp;emsp;&amp;emsp;HTTP 500-15 - 不允许请求 global.asa</span><br><span class="line">&amp;emsp;&amp;emsp;Error 501 - 未实现</span><br><span class="line">HTTP 502 - 网关错误</span><br><span class="line">HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;http&quot;&gt;&lt;a href=&quot;#http&quot; class=&quot;headerlink&quot; title=&quot;http&quot;&gt;&lt;/a&gt;http&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;1**(信息类)：表示接收到请求并且继续处理 100——客户必须继续发出请求 101——客户要求服
      
    
    </summary>
    
      <category term="基础" scheme="http://wang-zhibiao.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="http" scheme="http://wang-zhibiao.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>vue的开发过程</title>
    <link href="http://wang-zhibiao.github.io/2019/11/01/vue%E6%8A%80%E6%9C%AF/"/>
    <id>http://wang-zhibiao.github.io/2019/11/01/vue技术/</id>
    <published>2019-11-01T14:13:14.000Z</published>
    <updated>2020-04-14T02:25:37.076Z</updated>
    
    <content type="html"><![CDATA[<h3 id="子组件传出单个参数时："><a href="#子组件传出单个参数时：" class="headerlink" title="子组件传出单个参数时："></a>子组件传出单个参数时：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'test'</span>,<span class="keyword">this</span>.param)</span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">@test=<span class="string">'test($event,userDefined)'</span></span><br></pre></td></tr></table></figure><h3 id="子组件传出多个参数时："><a href="#子组件传出多个参数时：" class="headerlink" title="子组件传出多个参数时："></a>子组件传出多个参数时：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'test'</span>,<span class="keyword">this</span>.param1，<span class="keyword">this</span>.param2, <span class="keyword">this</span>.param3)</span><br><span class="line"><span class="comment">// 父组件 arguments 是以数组的形式传入</span></span><br><span class="line">@test=<span class="string">'test(arguments,userDefined)'</span></span><br></pre></td></tr></table></figure><h3 id="对于异步请求的异常处理"><a href="#对于异步请求的异常处理" class="headerlink" title="对于异步请求的异常处理"></a>对于异步请求的异常处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    <span class="keyword">async</span> getUserPageData() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//请求</span></span><br><span class="line">           <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="built_in">Promise</span>()/api请求</span><br><span class="line">        &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">            <span class="comment">// 失败的情况写在catch中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="handler方法和immediate属性"><a href="#handler方法和immediate属性" class="headerlink" title="handler方法和immediate属性"></a>handler方法和immediate属性</h2><p>这里 watch 的一个特点是，最初绑定的时候是不会执行的，要等到 <code>firstName</code> 改变时才执行监听计算。那我们想要一开始就让他最初绑定的时候就执行改怎么办呢？我们需要修改一下我们的 watch 写法，修改过后的 watch 代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  firstName: &#123;</span><br><span class="line">    handler(newName, oldName) &#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = newName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 代表在wacth里声明了firstName这个方法之后立即先去执行handler方法</span></span><br><span class="line">    immediate: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>注意到<code>handler</code>了吗，我们给 firstName 绑定了一个<code>handler</code>方法，之前我们写的 watch 方法其实默认写的就是这个<code>handler</code>，Vue.js会去处理这个逻辑，最终编译出来其实就是这个<code>handler</code>。</p><p>而<code>immediate:true</code>代表如果在 wacth 里声明了 firstName 之后，就会立即先去执行里面的handler方法，如果为 <code>false</code>就跟我们以前的效果一样，不会在绑定的时候就执行。</p><h3 id="解决导航栏重复点击跳转报错报错"><a href="#解决导航栏重复点击跳转报错报错" class="headerlink" title="解决导航栏重复点击跳转报错报错"></a>解决导航栏重复点击跳转报错报错</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalPush = Router.prototype.push;</span><br><span class="line">Router.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">location</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> originalPush.call(<span class="keyword">this</span>, location).catch(<span class="function"><span class="params">err</span> =&gt;</span> err);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="在组件中监听滚动事件"><a href="#在组件中监听滚动事件" class="headerlink" title="在组件中监听滚动事件"></a>在组件中监听滚动事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">   <span class="built_in">window</span>.addEventListener(<span class="string">"scroll"</span>, <span class="keyword">this</span>.handleScroll, <span class="literal">true</span>);</span><br><span class="line"> &#125;,</span><br><span class="line"> methods: &#123;</span><br><span class="line">   handleScroll() &#123;</span><br><span class="line">     <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.querySelector(<span class="string">"#main"</span>).scrollTop;</span><br><span class="line">     <span class="keyword">var</span> offsetTop = <span class="built_in">document</span>.querySelector(<span class="string">"#component"</span>).offsetTop;</span><br><span class="line">     <span class="keyword">var</span> clientHeight = <span class="built_in">document</span>.querySelector(<span class="string">"#component"</span>).clientHeight;</span><br><span class="line">     <span class="comment">//if (scrollTop - offsetTop - clientHeight + 500 &gt; 0) &#123;</span></span><br><span class="line">     <span class="comment">//   this.ForecastFixed = false;</span></span><br><span class="line">     <span class="comment">//  &#125; else if (scrollTop &gt; offsetTop - 50) &#123;</span></span><br><span class="line">     <span class="comment">//    this.ForecastFixed = true;</span></span><br><span class="line">     <span class="comment">//&#125; else &#123;</span></span><br><span class="line">     <span class="comment">//   this.ForecastFixed = false;</span></span><br><span class="line">     <span class="comment">//  &#125;</span></span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;   </span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">   <span class="built_in">window</span>.removeEventListener(<span class="string">"scroll"</span>, <span class="keyword">this</span>.handleScroll, <span class="literal">true</span>);</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>在 window.addEventListener 的第三个参数加上true，<strong>默认值</strong>为 <strong>false, 即冒泡传递</strong>，当值为 <strong>true 时, 事件使用捕获</strong>传递。beforeDestroy销毁也需要加上此属性</p><h3 id="vue中使用的防抖和节流"><a href="#vue中使用的防抖和节流" class="headerlink" title="vue中使用的防抖和节流"></a>vue中使用的防抖和节流</h3><p>定义utils.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数防抖（debounce）</span></span><br><span class="line"><span class="keyword">let</span> timeout = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> start = <span class="number">0</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> debounce = <span class="function">(<span class="params">func, delay</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timeout !== <span class="literal">null</span>) clearTimeout(timeout)</span><br><span class="line">    timeout = setTimeout(func, delay)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数节流(Throttle)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Throttle = <span class="function">(<span class="params">func, wait, trailing</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">if</span> ((now - start) &gt;= wait) &#123;</span><br><span class="line">        timer &amp;&amp; clearTimeout(timer)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">        start = now</span><br><span class="line">        <span class="keyword">return</span> func()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timer &amp;&amp; trailing) &#123;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            timer = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">return</span> func</span><br><span class="line">        &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;debounce,Throrrle&#125; <span class="keyword">from</span> <span class="string">"@/utils.js"</span></span><br><span class="line"> debounce(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//执行的防抖函数，鼠标移动事件，输入框改变事件，请求报错事件</span></span><br><span class="line">      <span class="keyword">if</span> (error.response.status === <span class="number">400</span> || <span class="built_in">String</span>(error).indexOf(<span class="string">'code 400'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">            debounce(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                 Message.error(error.response.data.message)</span><br><span class="line">           &#125;, <span class="number">100</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response.data)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>this.$set  为了设置一个数组的新属性添加在vm上进行响应式</p><h3 id="Proxy（vue3的响应拦截）"><a href="#Proxy（vue3的响应拦截）" class="headerlink" title="Proxy（vue3的响应拦截）"></a>Proxy（vue3的响应拦截）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;</span><br><span class="line">  <span class="keyword">get</span>(key) &#123; &#125;,</span><br><span class="line">  <span class="keyword">set</span>(key, value) &#123; &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="defineProperty-vue2的响应拦截"><a href="#defineProperty-vue2的响应拦截" class="headerlink" title="defineProperty(vue2的响应拦截)"></a>defineProperty(vue2的响应拦截)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(data, <span class="string">'count'</span>, &#123;</span><br><span class="line">  <span class="keyword">get</span>() &#123;&#125;,</span><br><span class="line">  <span class="keyword">set</span>() &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;子组件传出单个参数时：&quot;&gt;&lt;a href=&quot;#子组件传出单个参数时：&quot; class=&quot;headerlink&quot; title=&quot;子组件传出单个参数时：&quot;&gt;&lt;/a&gt;子组件传出单个参数时：&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="vue" scheme="http://wang-zhibiao.github.io/categories/vue/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="http://wang-zhibiao.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>commonJS以及ES6的引入方法</title>
    <link href="http://wang-zhibiao.github.io/2019/10/10/commonJS%E4%BB%A5%E5%8F%8AES6%E7%9A%84%E5%BC%95%E5%85%A5%E6%96%B9%E6%B3%95/"/>
    <id>http://wang-zhibiao.github.io/2019/10/10/commonJS以及ES6的引入方法/</id>
    <published>2019-10-10T04:10:56.000Z</published>
    <updated>2019-12-07T15:23:29.268Z</updated>
    
    <content type="html"><![CDATA[<p>commonJS，定义wang.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wang</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//封装的函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"wang"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;wang&#125;</span><br></pre></td></tr></table></figure><p>commonJS，引入(路径自定义)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">var</span> wang = <span class="built_in">require</span>(<span class="string">'./wang.js'</span>);</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">wang.wang();</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他引入</span></span><br><span class="line"><span class="keyword">var</span> &#123;wang&#125; = <span class="built_in">require</span>(<span class="string">'./wang.js'</span>);</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">wang();</span><br></pre></td></tr></table></figure><p>ES6,定义wang.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">wang</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//封装的函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"wang"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6,引入wang.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> &#123;wang&#125; <span class="keyword">from</span> <span class="string">"./wang.js"</span></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">wang();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;commonJS，定义wang.js&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
      <category term="基础" scheme="http://wang-zhibiao.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>开启你的博客创建之旅</title>
    <link href="http://wang-zhibiao.github.io/2019/09/14/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/"/>
    <id>http://wang-zhibiao.github.io/2019/09/14/我的博客创建/</id>
    <published>2019-09-14T14:22:56.000Z</published>
    <updated>2019-09-14T15:05:08.017Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3></blockquote><p>搭建之前首先需要安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a> 和 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></p><p>注册<a href="https://github.com/" target="_blank" rel="noopener">github</a>账号,创建以” github账户名.github.io “命名的仓库</p><p>学习git的基本操作  <a href="https://www.jianshu.com/p/d089f8556086" target="_blank" rel="noopener">友情链接</a></p><p>使用node 安装hexo的包</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><blockquote><h3 id="创建本地博客文件"><a href="#创建本地博客文件" class="headerlink" title="创建本地博客文件"></a>创建本地博客文件</h3></blockquote><ul><li>新建文件</li><li>鼠标右键打开 git bash here</li><li>hexo 初始化博客本地文件，使用以下命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">hexo install</span><br></pre></td></tr></table></figure><p>使用npm下载插件链接git仓库</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改博客文件下_config.yml</p><ul><li>仓库地址的修改</li></ul><p><img src="https://raw.githubusercontent.com/wang-zhibiao/wang-zhibiao.github.io/master/img/%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.png" alt="仓库地址"></p><ul><li>博客作者的配置</li></ul><p><img src="https://raw.githubusercontent.com/wang-zhibiao/wang-zhibiao.github.io/master/img/%E5%8D%9A%E5%AE%A2%E4%BD%9C%E8%80%85%E9%85%8D%E7%BD%AE.png" alt="博客作者的配置"></p><ul><li><p>提交博客文件到github仓库 </p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li><li><p>hexo配置完成后的界面</p></li></ul><p><img src="https://raw.githubusercontent.com/wang-zhibiao/wang-zhibiao.github.io/master/img/hexo%E5%9F%BA%E7%A1%80%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2.png" alt="hexo基础博客页面"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h3 id=&quot;搭建环境&quot;&gt;&lt;a href=&quot;#搭建环境&quot; class=&quot;headerlink&quot; title=&quot;搭建环境&quot;&gt;&lt;/a&gt;搭建环境&lt;/h3&gt;&lt;/blockquote&gt;
&lt;p&gt;搭建之前首先需要安装&lt;a href=&quot;https://nodejs.o
      
    
    </summary>
    
      <category term="blog" scheme="http://wang-zhibiao.github.io/categories/blog/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="node" scheme="http://wang-zhibiao.github.io/tags/node/"/>
    
      <category term="hexo" scheme="http://wang-zhibiao.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>+++post</title>
    <link href="http://wang-zhibiao.github.io/2019/09/12/+++post/"/>
    <id>http://wang-zhibiao.github.io/2019/09/12/+++post/</id>
    <published>2019-09-11T16:10:56.000Z</published>
    <updated>2020-02-28T10:12:41.841Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="any" scheme="http://wang-zhibiao.github.io/categories/any/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="any" scheme="http://wang-zhibiao.github.io/tags/any/"/>
    
  </entry>
  
  <entry>
    <title>理想视口</title>
    <link href="http://wang-zhibiao.github.io/2019/09/12/%E7%90%86%E6%83%B3%E8%A7%86%E5%8F%A3/"/>
    <id>http://wang-zhibiao.github.io/2019/09/12/理想视口/</id>
    <published>2019-09-11T16:10:56.000Z</published>
    <updated>2019-09-14T15:06:50.590Z</updated>
    
    <content type="html"><![CDATA[<p>标准的理想视口如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0,maximum-scale=1,minimum-scale=1,user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>普通的理想视口如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标准的写法比普通的写法 多了一些设置。</p><ul><li>使用<strong>标准</strong>的写法可以一些莫名其妙的问题 （触屏事件中的clientX/Y和pageX/Y的演示）</li><li>使用<strong>普通</strong>的写法可能会出现一些莫名其妙的问题</li></ul><p><strong>在写项目中建议使用标准的写法</strong></p><p><strong>参数的描述 了解即可</strong></p><ul><li>meta标签用来描述或设置一个HTML网页文档的属性</li><li>content 要设置或者描述的内容</li><li>width 设置视口的宽度 <strong>device-width</strong>等于屏幕的宽度</li><li>initial-scale 页面打开的时候视口放大的倍数 <strong>值:1</strong></li><li>user-scalable 是否允许用户缩放页面 <strong>值：no</strong></li><li>maximum-scale 如果允许放大的话 最大放大多少倍 <strong>值 ：1</strong></li><li>minimum-scale 如果允许放大的话 最小放大多少倍 <strong>值 ：1</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;标准的理想视口如下：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;cod
      
    
    </summary>
    
      <category term="布局" scheme="http://wang-zhibiao.github.io/categories/%E5%B8%83%E5%B1%80/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="html" scheme="http://wang-zhibiao.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Ajax请求</title>
    <link href="http://wang-zhibiao.github.io/2019/07/22/Ajax/"/>
    <id>http://wang-zhibiao.github.io/2019/07/22/Ajax/</id>
    <published>2019-07-21T16:10:56.000Z</published>
    <updated>2019-08-11T12:07:29.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p>一种异步数据交互技术</p><p>解决的问题： 提高用户的体验</p><p>现在开发里面，使用ajax实现前后端的完全分离开发</p><p>ajax使用的四个步骤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 创建异步对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="comment">// 2 指定请求的方式和请求的地址</span></span><br><span class="line">xhr.open(请求方式,目标地址);</span><br><span class="line"><span class="comment">// 3 发送请求</span></span><br><span class="line">xhr.send();</span><br><span class="line"><span class="comment">// 4 注册状态变化的监听(事件)</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 关注最终的结果</span></span><br><span class="line">  <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">    <span class="comment">//把响应体获取</span></span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步对象的readyState属性，是一个从0-4不断变化的数字，每个数字代表一个状态，我们只需要大概了解一下，关心最终的结果就可以了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;AJAX&quot;&gt;&lt;a href=&quot;#AJAX&quot; class=&quot;headerlink&quot; title=&quot;AJAX&quot;&gt;&lt;/a&gt;AJAX&lt;/h2&gt;&lt;p&gt;一种异步数据交互技术&lt;/p&gt;
&lt;p&gt;解决的问题： 提高用户的体验&lt;/p&gt;
&lt;p&gt;现在开发里面，使用ajax实现前后端的完全分
      
    
    </summary>
    
      <category term="Ajax" scheme="http://wang-zhibiao.github.io/categories/Ajax/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="Ajax" scheme="http://wang-zhibiao.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>node开启服务器</title>
    <link href="http://wang-zhibiao.github.io/2019/07/12/node%E5%9F%BA%E6%9C%AC%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9B%E5%BB%BA/"/>
    <id>http://wang-zhibiao.github.io/2019/07/12/node基本服务器创建/</id>
    <published>2019-07-11T16:10:56.000Z</published>
    <updated>2019-08-10T12:35:40.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建一个nodejs服务器"><a href="#搭建一个nodejs服务器" class="headerlink" title="搭建一个nodejs服务器"></a>搭建一个nodejs服务器</h2><p>nodejs搭建服务器，需要4步：</p><p>1.引入http模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);<span class="comment">// 语法就是 require(模块名称)</span></span><br></pre></td></tr></table></figure><p>2.创建服务器对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br></pre></td></tr></table></figure><p>3.监听ip和端口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.listen(端口,ip,回调函数);</span><br><span class="line"><span class="comment">// 例如</span></span><br><span class="line">server.listen(<span class="number">8080</span>,<span class="string">'127.0.0.1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  提示用户，可以通过什么地址访问服务器</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>4.监听浏览器请求服务器的事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// req - request - 请求对象，里面有请求所包含的数据 -请求头、请求体...</span></span><br><span class="line">  <span class="comment">// res - response - 响应对象，里面包含的是响应的数据 - 响应头、响应体...</span></span><br><span class="line">  <span class="comment">// 在事件处理程序里面把数据返回给浏览器</span></span><br><span class="line">  res.end(数据);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);<span class="comment">// 引入http模块,养成一个习惯，在node里面，要使用什么功能，就需要引入对应的模块</span></span><br><span class="line"><span class="comment">// 接着创建服务器对象</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="comment">// 接着为了可以 让浏览器找到我，监听ip和端口</span></span><br><span class="line"><span class="comment">// server.listen(端口,ip,回调函数) </span></span><br><span class="line"><span class="comment">// 其实ip和端口都是可以省略的，如果端口省略，默认是80，如果ip省略，默认是127.0.0.1</span></span><br><span class="line">server.listen(<span class="number">8080</span>,<span class="string">'127.0.0.1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'服务器已经开启，请通过 http://127.0.0.1:8080 访问'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 开始监听浏览器的请求</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 在请求事件的处理程序里面，返回数据给浏览器</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    res.end(<span class="string">'hello world'</span>);</span><br><span class="line">  &#125;,<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;搭建一个nodejs服务器&quot;&gt;&lt;a href=&quot;#搭建一个nodejs服务器&quot; class=&quot;headerlink&quot; title=&quot;搭建一个nodejs服务器&quot;&gt;&lt;/a&gt;搭建一个nodejs服务器&lt;/h2&gt;&lt;p&gt;nodejs搭建服务器，需要4步：&lt;/p&gt;
&lt;p&gt;1
      
    
    </summary>
    
      <category term="node" scheme="http://wang-zhibiao.github.io/categories/node/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="node" scheme="http://wang-zhibiao.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>高德地图与vue的使用</title>
    <link href="http://wang-zhibiao.github.io/2019/06/26/%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/"/>
    <id>http://wang-zhibiao.github.io/2019/06/26/高德地图/</id>
    <published>2019-06-26T02:00:56.000Z</published>
    <updated>2019-07-25T02:00:33.243Z</updated>
    
    <content type="html"><![CDATA[<h4 id="首先介绍一下vue与高德-之间的联系"><a href="#首先介绍一下vue与高德-之间的联系" class="headerlink" title="首先介绍一下vue与高德 之间的联系"></a>首先介绍一下vue与高德 之间的联系</h4><p>vue与数据息息相关，而且，vue的数据使用是通过this来调用</p><p>也是把数据挂载到了vm实例身上，调用时，使用this调用vm实例上挂载的数据及其方便，所以在vue的使用时我们偶尔也会碰到this指向不明，指向的不是vm实例导致  数据输出undefined</p><p>高德的API使用简单，我们可以思考：与vue的this的挂载使用</p><h4 id="初始化地图"><a href="#初始化地图" class="headerlink" title="初始化地图"></a>初始化地图</h4><h5 id="调用地图接口-同步"><a href="#调用地图接口-同步" class="headerlink" title="调用地图接口-同步"></a>调用地图接口-同步</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script</span><br><span class="line">      type=<span class="string">"text/javascript"</span></span><br><span class="line">      src=<span class="string">"https://webapi.amap.com/maps?v=1.4.15&amp;key=你个人的key，下面有高德与百度的链接"</span></span><br><span class="line">    &gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><a href="https://lbs.amap.com/api/javascript-api/guide/abc/prepare" target="_blank" rel="noopener">高德地图</a>            <a href="https://lbsyun.baidu.com/index.php?title=jspopular3.0/guide/getkey" target="_blank" rel="noopener">百度地图</a></p><h5 id="调用接口-异步"><a href="#调用接口-异步" class="headerlink" title="调用接口-异步"></a>调用接口-异步</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onLoad  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'https://webapi.amap.com/maps?v=1.4.15&amp;key=您申请的key值&amp;callback=onLoad'</span>;</span><br><span class="line"><span class="keyword">var</span> jsapi = doc.createElement(<span class="string">'script'</span>);</span><br><span class="line">jsapi.charset = <span class="string">'utf-8'</span>;</span><br><span class="line">jsapi.src = url;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(jsapi);</span><br></pre></td></tr></table></figure><p>两者各有优缺，看场景使用</p><h6 id="官方的使用"><a href="#官方的使用" class="headerlink" title="官方的使用"></a>官方的使用</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>, &#123;</span><br><span class="line">       zoom:<span class="number">11</span>,<span class="comment">//级别</span></span><br><span class="line">       center: [<span class="number">116.397428</span>, <span class="number">39.90923</span>],<span class="comment">//中心点坐标</span></span><br><span class="line">       viewMode:<span class="string">'3D'</span><span class="comment">//使用3D视图</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="与vue结合使用"><a href="#与vue结合使用" class="headerlink" title="与vue结合使用"></a>与vue结合使用</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          map:<span class="literal">null</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.map = <span class="keyword">new</span> AMap.Map(<span class="string">"hotelMap"</span>, &#123;</span><br><span class="line">        zoom: <span class="number">11</span>, <span class="comment">//级别</span></span><br><span class="line">        center: [<span class="number">116.397428</span>, <span class="number">39.90923</span>], <span class="comment">//中心点坐标</span></span><br><span class="line">        viewMode: <span class="string">"3D"</span> <span class="comment">//使用3D视图</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>两者的区别只是this与var的不同，但是实际上var 是定义一个全局的map变量让我们使用，我们在哪个函数都能使用map  因为他是全局的变量  </p><p>this却是让map这个变量挂载到vm实例身上，所以你需要在data里初始化map</p><h4 id="你的地图需要描点与打开信息窗体时"><a href="#你的地图需要描点与打开信息窗体时" class="headerlink" title="你的地图需要描点与打开信息窗体时"></a>你的地图需要描点与打开信息窗体时</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">       MapData:[],  <span class="comment">// 后台数据初始化</span></span><br><span class="line">      map: <span class="literal">null</span>,  <span class="comment">//地图初始化</span></span><br><span class="line">      infoWindow  <span class="comment">// 信息窗体</span></span><br><span class="line">      markers: <span class="literal">null</span>, <span class="comment">// 点的数据</span></span><br><span class="line">      center: [<span class="number">118.796623</span>, <span class="number">32.059352</span>]  <span class="comment">// 地图中心点</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>在vue调用地图时最好使用定时器调用，因为地图加载需要时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">this</span>.setMapInfo();</span><br><span class="line"> &#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>生成多个描点 需要后台返回经纬度信息，下面使用的数据已经是后台返回的带有经纬度信息location：{ longitude：经度 ，latitude：纬度}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    setMapInfo() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;location&#125; = <span class="keyword">this</span>.MapData[<span class="number">3</span>]  <span class="comment">//数据的第三条数据当地图中心</span></span><br><span class="line">      <span class="comment">//设置地图中心点</span></span><br><span class="line">      <span class="keyword">this</span>.center = [location.longitude,location.latitude]</span><br><span class="line">      <span class="keyword">this</span>.map = <span class="keyword">new</span> AMap.Map(<span class="string">"hotelMap"</span>, &#123;   <span class="comment">//初始化地图</span></span><br><span class="line">        zoom: <span class="number">10</span>, <span class="comment">//级别</span></span><br><span class="line">        center: <span class="keyword">this</span>.center, <span class="comment">//中心点坐标</span></span><br><span class="line">        viewMode: <span class="string">"3D"</span> <span class="comment">//使用3D视图</span></span><br><span class="line">      &#125;);</span><br><span class="line">        <span class="comment">//数据的循环  让点循环生成</span></span><br><span class="line">      <span class="keyword">this</span>.MapData.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//生成多个坐标点</span></span><br><span class="line">        <span class="keyword">this</span>.setMarker(v.area, [v.location.longitude, v.location.latitude], v);  <span class="comment">//第一个v.area  是点的标识，第二个是一个经纬度数据，第三个是v 后台的其他信息  ==》可以直接写参数v  其他的在setMarker</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//添加点标记</span></span><br><span class="line">    setMarker(markers, position, data) &#123;</span><br><span class="line">        <span class="comment">//点的设置</span></span><br><span class="line">      <span class="keyword">this</span>.markers = <span class="keyword">new</span> AMap.Marker(&#123;</span><br><span class="line">          <span class="comment">//点的内容，也是你在地图中显示的点的样式 你可以是一张图片 可以是圆，多边形</span></span><br><span class="line">        content: <span class="string">`&lt;div style="width:20px;height:28px;text-align:center;" class="el-icon-location"&gt;&lt;/div&gt;`</span>,</span><br><span class="line">        <span class="comment">//点的经纬度  也是位置</span></span><br><span class="line">        position: position,</span><br><span class="line">          <span class="comment">///点也有偏移</span></span><br><span class="line">        offset: <span class="keyword">new</span> AMap.Pixel(<span class="number">-17</span>, <span class="number">-42</span>), <span class="comment">// 相对于基点的偏移位置</span></span><br><span class="line">         <span class="comment">//地图一定要绑定在你想使用的地图上 也就是说在一个页面不一定只有一个地图</span></span><br><span class="line">        map: <span class="keyword">this</span>.map <span class="comment">//把点标记绑在前面初始化的 map_ 上，否则不显示</span></span><br><span class="line">      &#125;);</span><br><span class="line">        <span class="comment">//注册点的触发事件，触发信息窗体</span></span><br><span class="line">      <span class="keyword">this</span>.markers.on(<span class="string">"mousemove"</span>, () =&gt; &#123;</span><br><span class="line">          <span class="comment">//定义信息窗体的div内容</span></span><br><span class="line">        <span class="keyword">this</span>.content =  </span><br><span class="line">    <span class="string">`&lt;div&gt;&lt;img src="<span class="subst">$&#123;data.photos&#125;</span>" style="width:100px; height:50px;margin:0 auto"&gt; </span></span><br><span class="line"><span class="string">    &lt;div&gt;&lt;b style="color:#666"&gt;<span class="subst">$&#123;data.name&#125;</span>&lt;/b&gt;`</span></span><br><span class="line">        <span class="comment">//重新设置信息窗体</span></span><br><span class="line">        <span class="keyword">this</span>.infoWindow = <span class="keyword">new</span> AMap.InfoWindow(&#123;</span><br><span class="line">            <span class="comment">//信息窗体相对于基点=》也就是经纬度的点 偏移的xy轴量</span></span><br><span class="line">          offset: <span class="keyword">new</span> AMap.Pixel(<span class="number">-5</span>, <span class="number">-50</span>),</span><br><span class="line">          content: <span class="keyword">this</span>.content <span class="comment">//传入 dom 对象，或者 html 字符串</span></span><br><span class="line">        &#125;);</span><br><span class="line">          <span class="comment">//设置信息窗体需要打开 ，参数是  这个地图this.map  和  position  打开的位置</span></span><br><span class="line">        <span class="keyword">this</span>.infoWindow.open(<span class="keyword">this</span>.map, position);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h5><p><img src="https://raw.githubusercontent.com/wang-zhibiao/wang-zhibiao.github.io/master/img/%E5%9C%B0%E5%9B%BE.png" alt="地图"></p><h4 id="当你想要在地图外响应地图时"><a href="#当你想要在地图外响应地图时" class="headerlink" title="当你想要在地图外响应地图时"></a>当你想要在地图外响应地图时</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"traffic"</span>&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">         &lt;li v-<span class="keyword">for</span>=<span class="string">"(item,index) in sceneryMapdata"</span> :key=<span class="string">"index"</span> style=<span class="string">"cursor:pointer;"</span></span><br><span class="line">@mousemove=<span class="string">"choose(item)"</span>&gt;</span><br><span class="line">             &lt;span&gt;&#123;&#123;item.name&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;span&gt;&#123;&#123;item.biz_ext.rating&#125;&#125;公里&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/li&gt;     </span></span><br><span class="line"><span class="regexp">         &lt;/u</span>l&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">//地图的标签</span></span><br><span class="line">      activeName:<span class="string">"first"</span>,</span><br><span class="line">      <span class="comment">// 地图的数据</span></span><br><span class="line">      sceneryMapdata:<span class="literal">null</span>,</span><br><span class="line">       <span class="comment">//地图加载时间</span></span><br><span class="line">      loading:<span class="literal">true</span>,</span><br><span class="line">      <span class="comment">//地图窗体信息</span></span><br><span class="line">      content: <span class="string">"高级酒店"</span>,</span><br><span class="line">      map: <span class="literal">null</span>,</span><br><span class="line">      markers: <span class="literal">null</span>,</span><br><span class="line">      infoWindow: <span class="literal">null</span>,</span><br><span class="line">      center: [<span class="number">118.796623</span>, <span class="number">32.059352</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="comment">//触发地图的点</span></span><br><span class="line">    choose(data)&#123;</span><br><span class="line">       <span class="keyword">let</span> temp = data.location.split(<span class="string">","</span>);</span><br><span class="line">        temp = [temp[<span class="number">0</span>]<span class="number">-0</span>,temp[<span class="number">1</span>]<span class="number">-0</span>]</span><br><span class="line">        <span class="keyword">this</span>.content = data.name</span><br><span class="line">         <span class="keyword">this</span>.infoWindow = <span class="keyword">new</span> AMap.InfoWindow(&#123;</span><br><span class="line">          offset: <span class="keyword">new</span> AMap.Pixel(<span class="number">-5</span>, <span class="number">-50</span>),</span><br><span class="line">          content: <span class="keyword">this</span>.content <span class="comment">//传入 dom 对象，或者 html 字符串</span></span><br><span class="line">        &#125;);</span><br><span class="line">       <span class="keyword">this</span>.infoWindow.open(<span class="keyword">this</span>.map, temp);</span><br><span class="line">    </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//添加点标记</span></span><br><span class="line">    setMarker(markers, position, data) &#123;</span><br><span class="line">      <span class="keyword">this</span>.markers = <span class="keyword">new</span> AMap.Marker(&#123;</span><br><span class="line">        content: <span class="string">`&lt;div style="width:20px;height:28px;text-align:center;" class="el-icon-location"&gt;&lt;/div&gt;`</span>,</span><br><span class="line">        position: position,</span><br><span class="line">        offset: <span class="keyword">new</span> AMap.Pixel(<span class="number">-17</span>, <span class="number">-42</span>), <span class="comment">// 相对于基点的偏移位置</span></span><br><span class="line">        map: <span class="keyword">this</span>.map <span class="comment">//把点标记绑在前面初始化的 map_ 上，否则不显示</span></span><br><span class="line">      &#125;);</span><br><span class="line">       AMap.event.addListener(<span class="keyword">this</span>.markers,<span class="string">"mousemove"</span>, ()=&gt;&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = data.name;</span><br><span class="line">        <span class="keyword">this</span>.infoWindow = <span class="keyword">new</span> AMap.InfoWindow(&#123;</span><br><span class="line">          offset: <span class="keyword">new</span> AMap.Pixel(<span class="number">-5</span>, <span class="number">-50</span>),</span><br><span class="line">          content: <span class="keyword">this</span>.content <span class="comment">//传入 dom 对象，或者 html 字符串</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.infoWindow.open(<span class="keyword">this</span>.map, position);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    setMapInfo() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;location&#125; = <span class="keyword">this</span>.sceneryMapdata[<span class="number">3</span>]</span><br><span class="line">      <span class="comment">//重新设置地图中心点</span></span><br><span class="line">      <span class="keyword">const</span> temp = location.split(<span class="string">","</span>);</span><br><span class="line">      <span class="keyword">this</span>.center = [temp[<span class="number">0</span>]<span class="number">-0</span>,temp[<span class="number">1</span>]<span class="number">-0</span>]</span><br><span class="line">      <span class="keyword">this</span>.map = <span class="keyword">new</span> AMap.Map(<span class="string">"detailMap"</span>, &#123;</span><br><span class="line">        zoom: <span class="number">14</span>, <span class="comment">//级别</span></span><br><span class="line">        center: <span class="keyword">this</span>.center, <span class="comment">//中心点坐标</span></span><br><span class="line">        viewMode: <span class="string">"3D"</span> <span class="comment">//使用3D视图</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">this</span>.sceneryMapdata.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//生成多个坐标点</span></span><br><span class="line">        <span class="keyword">let</span> str = v.location.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">this</span>.setMarker(v.name, [str[<span class="number">0</span>]<span class="number">-0</span>,str[<span class="number">1</span>]<span class="number">-0</span>], v);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//请求数据</span></span><br><span class="line">    getMapdata()&#123;</span><br><span class="line">      <span class="keyword">this</span>.$axios(&#123;</span><br><span class="line">      url:<span class="string">`https://restapi.amap.com/v3/place/text`</span>,</span><br><span class="line">      params:&#123;</span><br><span class="line">        keyword:<span class="string">''</span>,</span><br><span class="line">        location:<span class="string">"118.732841,32.077242"</span>,</span><br><span class="line">        city:<span class="string">"南京市"</span>,</span><br><span class="line">        types:<span class="string">"风景名胜"</span>,</span><br><span class="line">        output:<span class="string">'json'</span>,</span><br><span class="line">        page:<span class="number">1</span>,</span><br><span class="line">        offset:<span class="number">10</span>,</span><br><span class="line">        key:<span class="string">'key私人定制'</span>  <span class="comment">//=》 这个key是一个web服务 当你创建key可以选择</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.sceneryMapdata = res.data.pois</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> mounted() &#123;</span><br><span class="line">     setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setMapInfo();</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">    <span class="comment">//请求数据</span></span><br><span class="line">    <span class="keyword">this</span>.getMapdata()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;首先介绍一下vue与高德-之间的联系&quot;&gt;&lt;a href=&quot;#首先介绍一下vue与高德-之间的联系&quot; class=&quot;headerlink&quot; title=&quot;首先介绍一下vue与高德 之间的联系&quot;&gt;&lt;/a&gt;首先介绍一下vue与高德 之间的联系&lt;/h4&gt;&lt;p&gt;vue与数据
      
    
    </summary>
    
      <category term="vue-高德地图" scheme="http://wang-zhibiao.github.io/categories/vue-%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="vue高德地图" scheme="http://wang-zhibiao.github.io/tags/vue%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>JS执行上下文</title>
    <link href="http://wang-zhibiao.github.io/2019/06/25/js%E4%B8%8A%E4%B8%8B%E6%96%87%E6%89%A7%E8%A1%8C/"/>
    <id>http://wang-zhibiao.github.io/2019/06/25/js上下文执行/</id>
    <published>2019-06-24T19:10:56.000Z</published>
    <updated>2019-07-24T09:55:58.262Z</updated>
    
    <content type="html"><![CDATA[<p>在开始说明JS上下文栈和作用域之前，我们先说明下JS上下文以及作用域的概念。<br>执行上下文就是当前 JavaScript 代码被解析和执行时所在环境的抽象概念， JavaScript 中运行任何的代码都是在执行上下文中运行。<br>执行上下文类型分为：<br>全局执行上下文<br>函数执行上下文<br>执行上下文创建过程中，需要做以下几件事:<br>创建变量对象：首先初始化函数的参数arguments，提升函数声明和变量声明。<br>创建作用域链（Scope Chain）：在执行期上下文的创建阶段，作用域链是在变量对象之后创建的。<br>确定this的值，即 ResolveThisBinding<br>作用域<br><strong>作用域</strong>负责收集和维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。—— 摘录自《你不知道的JavaScript》(上卷)<br>作用域有两种工作模型：词法作用域和动态作用域，JS采用的是<strong>词法作用域</strong>工作模型，词法作用域意味着作用域是由书写代码时变量和函数声明的位置决定的。(<code>with</code> 和 <code>eval</code> 能够修改词法作用域，但是不推荐使用，对此不做特别说明)<br>作用域分为：<br>全局作用域<br>函数作用域<br>块级作用域<br>JS执行上下文栈(后面简称执行栈)<br>执行栈，也叫做调用栈，具有 <strong>LIFO</strong> (后进先出) 结构，用于存储在代码执行期间创建的所有执行上下文。<br>规则如下：<br>首次运行JavaScript代码的时候,会创建一个全局执行的上下文并Push到当前的执行栈中，每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并Push当前执行栈的栈顶。<br>当栈顶的函数运行完成后，其对应的函数执行上下文将会从执行栈中Pop出，上下文的控制权将移动到当前执行栈的下一个执行上下文。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">first()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'first'</span>)</span><br><span class="line">&#125;</span><br><span class="line">second()&#123;</span><br><span class="line">    first()</span><br><span class="line">&#125;</span><br><span class="line">third()&#123;</span><br><span class="line">    second()</span><br><span class="line">&#125;</span><br><span class="line">third()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开始说明JS上下文栈和作用域之前，我们先说明下JS上下文以及作用域的概念。&lt;br&gt;执行上下文就是当前 JavaScript 代码被解析和执行时所在环境的抽象概念， JavaScript 中运行任何的代码都是在执行上下文中运行。&lt;br&gt;执行上下文类型分为：&lt;br&gt;全局执行上
      
    
    </summary>
    
      <category term="知识" scheme="http://wang-zhibiao.github.io/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="javascript" scheme="http://wang-zhibiao.github.io/tags/javascript/"/>
    
      <category term="function" scheme="http://wang-zhibiao.github.io/tags/function/"/>
    
  </entry>
  
</feed>
